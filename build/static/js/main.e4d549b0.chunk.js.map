{"version":3,"sources":["components/Navbar.js","components/Sidebar.js","services/api.js","pages/Dashboard.js","services/solanaApi.js","direct-api.js","pages/PresaleOverview.js","pages/PresaleManagement.js","pages/WhitelistManagement.js","pages/TestingTools.js","pages/RewardsDashboard.js","pages/LiquidityDashboard.js","pages/MarketingDashboard.js","pages/TeamDashboard.js","pages/TreasuryDashboard.js","App.js","reportWebVitals.js","index.js"],"names":["navbarStyle","display","justifyContent","alignItems","padding","height","backgroundColor","color","boxShadow","position","top","left","right","zIndex","width","logoStyle","fontSize","fontWeight","userInfoStyle","userNameStyle","marginRight","Navbar","React","createElement","style","sidebarStyle","borderRight","overflowY","menuStyle","listStyle","margin","sectionStyle","borderBottom","sectionHeaderStyle","cursor","expandIconStyle","subMenuStyle","subMenuItemStyle","borderLeft","transition","subLinkStyle","textDecoration","Sidebar","location","useLocation","expandedSections","setExpandedSections","useState","presale","rewards","liquidity","marketing","team","treasury","isActive","path","pathname","toggleSection","section","[object Object]","renderSubMenu","items","map","item","index","key","className","Link","to","name","onClick","api","getPresaleInfo","async","response","fetch","ok","Error","status","statusText","json","error","console","extendPresaleTime","method","headers","Content-Type","body","JSON","stringify","minutes","pausePresale","resumePresale","updatePresaleParams","params","withdrawUnsoldTokens","amount","getTokenInfo","transferTokens","recipient","mintTokens","burnTokens","getWhitelistedUsers","addToWhitelist","address","allocation","bulkAddToWhitelist","addresses","removeFromWhitelist","runTokenTests","runDynamoDBTests","runRDSTests","runSolanaTests","Dashboard","loading","setLoading","setError","presaleInfo","setPresaleInfo","useEffect","fetchPresaleInfo","data","err","intervalId","setInterval","clearInterval","Box","sx","CircularProgress","p","Typography","variant","gutterBottom","Fragment","totalSupply","tokensSold","TOKEN_ADDRESS","solanaApi","getTokenBalance","walletAddress","tokenAddress","arguments","length","undefined","log","axios","get","balance","getTokenSupply","supply","getTransactionCount","count","getTransactionHistory","limit","transactions","getPresalePoolData","getRewardsPoolData","getLiquidityPoolData","getMarketingPoolData","getTeamAllocationData","getTreasuryReservesData","config","directApi","create","baseURL","timeout","Accept","Origin","interceptors","use","direct_api","StyledCard","styled","Card","_ref","theme","flexDirection","borderRadius","&:hover","transform","CardTitle","_ref2","marginBottom","CardValue","_ref3","PresaleOverview","presaleData","setPresaleData","tokensSoldForSol","tokensSoldForFiat","transactionsNumber","lastUpdated","Date","toISOString","timeLeft","days","hours","seconds","presalePoolAddress","setTransactions","fetchData","blockchainData","txHistory","message","totalRaised","participants","timer","prevData","refreshInterval","formatNumber","num","toString","replace","Grid","container","spacing","mt","xs","sm","md","CardContent","formatTimeLeft","toFixed","overflowX","borderCollapse","marginTop","textAlign","tx","href","signature","target","rel","substring","blockTime","toLocaleString","slot","fee","dateString","formatDate","overflow","CardHeader","CardBody","_ref4","flexGrow","FormGroup","_ref5","PresaleManagement","activeTab","setActiveTab","success","setSuccess","tokenInfo","setTokenInfo","presaleParams","setPresaleParams","startTime","split","endTime","now","minPurchaseAmount","maxPurchaseAmount","whitelistEnabled","paused","info","backendInfo","backendErr","fetchTokenInfo","my","size","bgcolor","mb","flexWrap","Button","px","py","borderColor","borderWidth","borderStyle","borderBottomColor","symbol","decimals","circulatingSupply","wordBreak","mintAuthority","freezeAuthority","onSubmit","e","preventDefault","value","parseFloat","reset","TextField","id","fullWidth","placeholder","type","disabled","mintTo","mintAmount","burnAmount","gap","borderTop","pt","checked","updatedParams","onChange","FormControlLabel","control","Checkbox","label","withdrawAmount","WhitelistManagement","whitelistedUsers","setWhitelistedUsers","showConfirmation","setShowConfirmation","addressToDelete","setAddressToDelete","selectedUsers","setSelectedUsers","searchTerm","setSearchTerm","filteredUsers","setFilteredUsers","showMultiDeleteConfirmation","setShowMultiDeleteConfirmation","errorMessage","directErr","solanaErr","apiErr","email","dateAdded","fetchWhitelistedUsers","trim","lowercasedSearch","toLowerCase","filtered","filter","user","includes","match","updatedWhitelist","addressesText","invalidAddresses","multiline","rows","maxWidth","handleDeleteSelected","handleSelectAll","colSpan","userId","handleSelectUser","handleDeleteUser","bottom","cancelDelete","mr","userToDelete","find","cancelMultiDelete","TestingTools","testResults","setTestResults","isLoading","setIsLoading","setTimeout","tests","test","RewardsDashboard","_poolData$percentFill","poolData","setPoolData","percentFilled","tokenAllocations","rewardsPool","pools","pool","fallbackErr","LiquidityDashboard","liquidityPool","MarketingDashboard","marketingPool","TeamDashboard","teamPool","TreasuryDashboard","treasuryPool","createTheme","palette","primary","main","secondary","background","default","typography","fontFamily","join","App","ThemeProvider","CssBaseline","Router","component","ml","Routes","Route","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e4d549b0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar = () => {\n  return (\n    <nav style={navbarStyle}>\n      <div style={logoStyle}>\n        DPNET ADMIN DASHBOARD\n      </div>\n      <div style={userInfoStyle}>\n        <span style={userNameStyle}>Admin</span>\n      </div>\n    </nav>\n  );\n};\n\nconst navbarStyle = {\n  display: 'flex',\n  justifyContent: 'space-between',\n  alignItems: 'center',\n  padding: '0 20px',\n  height: '60px',\n  backgroundColor: '#2c3e50',\n  color: 'white',\n  boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  right: 0,\n  zIndex: 1000,\n  width: '100%'\n};\n\nconst logoStyle = {\n  fontSize: '20px',\n  fontWeight: 'bold'\n};\n\nconst userInfoStyle = {\n  display: 'flex',\n  alignItems: 'center'\n};\n\nconst userNameStyle = {\n  marginRight: '10px'\n};\n\nexport default Navbar;\n","import React, { useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst Sidebar = () => {\n  const location = useLocation();\n  const [expandedSections, setExpandedSections] = useState({\n    presale: true,\n    rewards: false,\n    liquidity: false,\n    marketing: false,\n    team: false,\n    treasury: false\n  });\n  \n  const isActive = (path) => {\n    return location.pathname === path ? 'active' : '';\n  };\n\n  const toggleSection = (section) => {\n    setExpandedSections({\n      ...expandedSections,\n      [section]: !expandedSections[section]\n    });\n  };\n\n  const renderSubMenu = (section, items) => {\n    return (\n      <ul style={expandedSections[section] ? subMenuStyle : { display: 'none' }}>\n        {items.map((item, index) => (\n          <li key={index} style={subMenuItemStyle} className={isActive(item.path)}>\n            <Link to={item.path} style={subLinkStyle}>{item.name}</Link>\n          </li>\n        ))}\n      </ul>\n    );\n  };\n\n  return (\n    <div style={sidebarStyle}>\n      <ul style={menuStyle}>\n        {/* Presale Pool Section */}\n        <li style={sectionStyle}>\n          <div \n            style={sectionHeaderStyle} \n            onClick={() => toggleSection('presale')}\n          >\n            <span>Presale Pool</span>\n            <span style={expandIconStyle}>{expandedSections.presale ? '▼' : '▶'}</span>\n          </div>\n          {renderSubMenu('presale', [\n            { name: 'Dashboard', path: '/' },\n            { name: 'Presale Overview', path: '/presale-overview' },\n            { name: 'Presale Management', path: '/presale-management' },\n            { name: 'Whitelist Management', path: '/whitelist-management' },\n            { name: 'Testing Tools', path: '/testing-tools' }\n          ])}\n        </li>\n\n        {/* Rewards Pool Section */}\n        <li style={sectionStyle}>\n          <div \n            style={sectionHeaderStyle} \n            onClick={() => toggleSection('rewards')}\n          >\n            <span>Rewards Pool</span>\n            <span style={expandIconStyle}>{expandedSections.rewards ? '▼' : '▶'}</span>\n          </div>\n          {renderSubMenu('rewards', [\n            { name: 'Dashboard', path: '/rewards-dashboard' }\n          ])}\n        </li>\n\n        {/* Liquidity Pools Section */}\n        <li style={sectionStyle}>\n          <div \n            style={sectionHeaderStyle} \n            onClick={() => toggleSection('liquidity')}\n          >\n            <span>Liquidity Pools</span>\n            <span style={expandIconStyle}>{expandedSections.liquidity ? '▼' : '▶'}</span>\n          </div>\n          {renderSubMenu('liquidity', [\n            { name: 'Dashboard', path: '/liquidity-dashboard' }\n          ])}\n        </li>\n\n        {/* Marketing Section */}\n        <li style={sectionStyle}>\n          <div \n            style={sectionHeaderStyle} \n            onClick={() => toggleSection('marketing')}\n          >\n            <span>Marketing & Community</span>\n            <span style={expandIconStyle}>{expandedSections.marketing ? '▼' : '▶'}</span>\n          </div>\n          {renderSubMenu('marketing', [\n            { name: 'Dashboard', path: '/marketing-dashboard' }\n          ])}\n        </li>\n\n        {/* Team Allocation Section */}\n        <li style={sectionStyle}>\n          <div \n            style={sectionHeaderStyle} \n            onClick={() => toggleSection('team')}\n          >\n            <span>Team Allocation</span>\n            <span style={expandIconStyle}>{expandedSections.team ? '▼' : '▶'}</span>\n          </div>\n          {renderSubMenu('team', [\n            { name: 'Dashboard', path: '/team-dashboard' }\n          ])}\n        </li>\n\n        {/* Treasury Reserves Section */}\n        <li style={sectionStyle}>\n          <div \n            style={sectionHeaderStyle} \n            onClick={() => toggleSection('treasury')}\n          >\n            <span>Treasury Reserves</span>\n            <span style={expandIconStyle}>{expandedSections.treasury ? '▼' : '▶'}</span>\n          </div>\n          {renderSubMenu('treasury', [\n            { name: 'Dashboard', path: '/treasury-dashboard' }\n          ])}\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nconst sidebarStyle = {\n  width: '250px',\n  backgroundColor: '#f8f9fa',\n  borderRight: '1px solid #e9ecef',\n  padding: '0',\n  height: '100vh',\n  overflowY: 'auto',\n  position: 'fixed',\n  left: 0,\n  top: '60px'\n};\n\nconst menuStyle = {\n  listStyle: 'none',\n  padding: 0,\n  margin: 0\n};\n\nconst sectionStyle = {\n  borderBottom: '1px solid #e9ecef'\n};\n\nconst sectionHeaderStyle = {\n  padding: '15px 20px',\n  cursor: 'pointer',\n  display: 'flex',\n  justifyContent: 'space-between',\n  alignItems: 'center',\n  fontWeight: 'bold',\n  backgroundColor: '#f1f3f5'\n};\n\nconst expandIconStyle = {\n  fontSize: '10px'\n};\n\nconst subMenuStyle = {\n  listStyle: 'none',\n  padding: 0,\n  margin: 0,\n  backgroundColor: '#ffffff'\n};\n\nconst subMenuItemStyle = {\n  padding: '10px 20px 10px 35px',\n  borderLeft: '3px solid transparent',\n  transition: 'all 0.2s'\n};\n\nconst subLinkStyle = {\n  color: '#333',\n  textDecoration: 'none',\n  display: 'block',\n  fontSize: '14px'\n};\n\nexport default Sidebar;\n","// API service for interacting with the backend\n\nconst API_URL = '/api';\n\n// Presale Overview API\nexport const getPresaleInfo = async () => {\n  try {\n    const response = await fetch(`${API_URL}/pool/presale-pool-data`);\n    \n    if (!response.ok) {\n      throw new Error(`API error: ${response.status} ${response.statusText}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching presale info:', error);\n    throw error;\n  }\n};\n\nexport const extendPresaleTime = async (minutes) => {\n  try {\n    const response = await fetch(`${API_URL}/pool/presale/extend-time`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ minutes }),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`API error: ${response.status} ${response.statusText}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error extending presale time:', error);\n    throw error;\n  }\n};\n\n// Presale Management API\nexport const pausePresale = async () => {\n  try {\n    const response = await fetch(`${API_URL}/pool/presale/pause`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error pausing presale:', error);\n    throw error;\n  }\n};\n\nexport const resumePresale = async () => {\n  try {\n    const response = await fetch(`${API_URL}/pool/presale/resume`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error resuming presale:', error);\n    throw error;\n  }\n};\n\nexport const updatePresaleParams = async (params) => {\n  try {\n    const response = await fetch(`${API_URL}/pool/presale/update-params`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(params),\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating presale parameters:', error);\n    throw error;\n  }\n};\n\nexport const withdrawUnsoldTokens = async (amount) => {\n  try {\n    const response = await fetch(`${API_URL}/pool/presale/withdraw-unsold`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ amount }),\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error withdrawing unsold tokens:', error);\n    throw error;\n  }\n};\n\n// Token Management API\nexport const getTokenInfo = async () => {\n  try {\n    const response = await fetch(`${API_URL}/pool/token-info`);\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching token info:', error);\n    throw error;\n  }\n};\n\nexport const transferTokens = async (recipient, amount) => {\n  try {\n    const response = await fetch(`${API_URL}/pool/token/transfer`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ recipient, amount }),\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error transferring tokens:', error);\n    throw error;\n  }\n};\n\nexport const mintTokens = async (recipient, amount) => {\n  try {\n    const response = await fetch(`${API_URL}/pool/token/mint`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ recipient, amount }),\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error minting tokens:', error);\n    throw error;\n  }\n};\n\nexport const burnTokens = async (amount) => {\n  try {\n    const response = await fetch(`${API_URL}/pool/token/burn`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ amount }),\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error burning tokens:', error);\n    throw error;\n  }\n};\n\n// Whitelist Management API\nexport const getWhitelistedUsers = async () => {\n  try {\n    const response = await fetch(`${API_URL}/pool/whitelist`);\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching whitelisted users:', error);\n    throw error;\n  }\n};\n\nexport const addToWhitelist = async (address, allocation) => {\n  try {\n    const response = await fetch(`${API_URL}/pool/whitelist/add`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ address, allocation }),\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error adding to whitelist:', error);\n    throw error;\n  }\n};\n\nexport const bulkAddToWhitelist = async (addresses, allocation) => {\n  try {\n    const response = await fetch(`${API_URL}/pool/whitelist/bulk-add`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ addresses, allocation }),\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error bulk adding to whitelist:', error);\n    throw error;\n  }\n};\n\nexport const removeFromWhitelist = async (address) => {\n  try {\n    const response = await fetch(`${API_URL}/pool/whitelist/remove`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ address }),\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error removing from whitelist:', error);\n    throw error;\n  }\n};\n\n// Testing Tools API\nexport const runTokenTests = async () => {\n  try {\n    const response = await fetch(`${API_URL}/pool/tests/token`, {\n      method: 'POST',\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error running token tests:', error);\n    throw error;\n  }\n};\n\nexport const runDynamoDBTests = async () => {\n  try {\n    const response = await fetch(`${API_URL}/pool/tests/dynamodb`, {\n      method: 'POST',\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error running DynamoDB tests:', error);\n    throw error;\n  }\n};\n\nexport const runRDSTests = async () => {\n  try {\n    const response = await fetch(`${API_URL}/pool/tests/rds`, {\n      method: 'POST',\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error running RDS tests:', error);\n    throw error;\n  }\n};\n\nexport const runSolanaTests = async () => {\n  try {\n    const response = await fetch(`${API_URL}/pool/tests/solana`, {\n      method: 'POST',\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error running Solana tests:', error);\n    throw error;\n  }\n};\n\nexport default {\n  // Presale Overview\n  getPresaleInfo,\n  extendPresaleTime,\n  \n  // Presale Management\n  pausePresale,\n  resumePresale,\n  updatePresaleParams,\n  withdrawUnsoldTokens,\n  \n  // Token Management\n  getTokenInfo,\n  transferTokens,\n  mintTokens,\n  burnTokens,\n  \n  // Whitelist Management\n  getWhitelistedUsers,\n  addToWhitelist,\n  bulkAddToWhitelist,\n  removeFromWhitelist,\n  \n  // Testing Tools\n  runTokenTests,\n  runDynamoDBTests,\n  runRDSTests,\n  runSolanaTests,\n};\n","import React, { useState, useEffect } from 'react';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport { CircularProgress } from '@mui/material';\nimport api from '../services/api';\n\nconst Dashboard = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [presaleInfo, setPresaleInfo] = useState(null);\n\n  useEffect(() => {\n    const fetchPresaleInfo = async () => {\n      try {\n        setLoading(true);\n        const data = await api.getPresaleInfo();\n        setPresaleInfo(data);\n        setError(null);\n      } catch (err) {\n        console.error('Error fetching presale info:', err);\n        setError('Failed to load presale information. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPresaleInfo();\n\n    const intervalId = setInterval(fetchPresaleInfo, 5 * 60 * 1000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Typography color=\"error\" variant=\"h6\">{error}</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Dashboard\n      </Typography>\n      <Typography variant=\"subtitle1\" color=\"textSecondary\">\n        Welcome to the DPNET ADMIN Dashboard!\n      </Typography>\n      {presaleInfo && (\n        <>\n          <Typography variant=\"body1\">\n            Total Supply: {presaleInfo.totalSupply}\n          </Typography>\n          <Typography variant=\"body1\">\n            Tokens Sold: {presaleInfo.tokensSold}\n          </Typography>\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default Dashboard;\n","// Solana API service for blockchain interactions\n// This file connects to our backend API server which handles the actual Solana blockchain interactions\n\nimport axios from 'axios';\n\n// Backend API URL - using relative URL for better compatibility with HTTPS\nconst API_URL = '/api';\n\n// Token and wallet addresses\nconst TOKEN_ADDRESS = 'F4qB6W5tUPHXRE1nfnw7MkLAu3YU7T12o6T52QKq5pQK';\nconst PRESALE_POOL_ADDRESS = 'bJhdXiRhddYL2wXHjx3CEsGDRDCLYrW5ZxmG4xeSahX';\nconst REWARDS_POOL_ADDRESS = 'FdYsNj3jhGLcCzoMLA2KZdzUnM3UiwCYUNhMmmFaUDie';\nconst LIQUIDITY_POOL_ADDRESS = '3HUwa6YYKNdDgsU6nkkMWyBgT2BRtzmD1JpWSg77sa55';\nconst MARKETING_POOL_ADDRESS = '99AufghSAA7Xj1grrhLgiZMvGXk6XAGLESf1PRJBpoko';\nconst TEAM_ALLOCATION_ADDRESS = '2MAP3pASkcvdeKnsRS5JGFebYvvAG14ikShtPLbwg4sw';\nconst TREASURY_RESERVES_ADDRESS = '2BLLHiCHtrYDRUuh4VndsnNPpyJ3AHFp3oMAcxNX1kJj';\n\n// Helper function to get token balance\nexport const getTokenBalance = async (walletAddress, tokenAddress = TOKEN_ADDRESS) => {\n  try {\n    console.log(`Getting token balance for ${walletAddress}`);\n    const response = await axios.get(`${API_URL}/pool/token-balance/${walletAddress}`, {\n      params: { tokenAddress }\n    });\n    return response.data.balance;\n  } catch (error) {\n    console.error('Error getting token balance:', error);\n    throw error;\n  }\n};\n\n// Helper function to get token supply\nexport const getTokenSupply = async (tokenAddress = TOKEN_ADDRESS) => {\n  try {\n    console.log(`Getting token supply for ${tokenAddress}`);\n    const response = await axios.get(`${API_URL}/pool/token-supply`, {\n      params: { tokenAddress }\n    });\n    return response.data.supply;\n  } catch (error) {\n    console.error('Error getting token supply:', error);\n    throw error;\n  }\n};\n\n// Helper function to get transaction count\nexport const getTransactionCount = async (walletAddress) => {\n  try {\n    console.log(`Getting transaction count for ${walletAddress}`);\n    const response = await axios.get(`${API_URL}/pool/transaction-count/${walletAddress}`);\n    return response.data.count;\n  } catch (error) {\n    console.error('Error getting transaction count:', error);\n    throw error;\n  }\n};\n\n// Helper function to get transaction history\nexport const getTransactionHistory = async (walletAddress, limit = 10) => {\n  try {\n    console.log(`Getting transaction history for ${walletAddress}, limit: ${limit}`);\n    const response = await axios.get(`${API_URL}/pool/transaction-history/${walletAddress}`, {\n      params: { limit }\n    });\n    return response.data.transactions;\n  } catch (error) {\n    console.error('Error getting transaction history:', error);\n    throw error;\n  }\n};\n\n// Get presale pool data directly from blockchain\nexport const getPresalePoolData = async () => {\n  try {\n    console.log('Getting presale pool data');\n    const response = await axios.get(`${API_URL}/pool/presale-pool-data`);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting presale pool data:', error);\n    throw error;\n  }\n};\n\n// Get rewards pool data directly from blockchain\nexport const getRewardsPoolData = async () => {\n  try {\n    console.log('Getting rewards pool data');\n    const response = await axios.get(`${API_URL}/pool/rewards-pool-data`);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting rewards pool data:', error);\n    throw error;\n  }\n};\n\n// Get liquidity pool data directly from blockchain\nexport const getLiquidityPoolData = async () => {\n  try {\n    console.log('Getting liquidity pool data');\n    const response = await axios.get(`${API_URL}/pool/liquidity-pool-data`);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting liquidity pool data:', error);\n    throw error;\n  }\n};\n\n// Get marketing pool data directly from blockchain\nexport const getMarketingPoolData = async () => {\n  try {\n    console.log('Getting marketing pool data');\n    const response = await axios.get(`${API_URL}/pool/marketing-pool-data`);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting marketing pool data:', error);\n    throw error;\n  }\n};\n\n// Get team allocation data directly from blockchain\nexport const getTeamAllocationData = async () => {\n  try {\n    console.log('Getting team allocation data');\n    const response = await axios.get(`${API_URL}/pool/team-allocation-data`);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting team allocation data:', error);\n    throw error;\n  }\n};\n\n// Get treasury reserves data directly from blockchain\nexport const getTreasuryReservesData = async () => {\n  try {\n    console.log('Getting treasury reserves data');\n    const response = await axios.get(`${API_URL}/pool/treasury-reserves-data`);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting treasury reserves data:', error);\n    throw error;\n  }\n};\n\n// Get token information directly from blockchain\nexport const getTokenInfo = async () => {\n  try {\n    console.log('Getting token info');\n    const response = await axios.get(`${API_URL}/pool/token-info`);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting token info:', error);\n    throw error;\n  }\n};\n\nconst solanaApi = {\n  getTokenBalance,\n  getTokenSupply,\n  getTransactionCount,\n  getTransactionHistory,\n  getPresalePoolData,\n  getRewardsPoolData,\n  getLiquidityPoolData,\n  getMarketingPoolData,\n  getTeamAllocationData,\n  getTreasuryReservesData,\n  getTokenInfo\n};\n\nexport default solanaApi;\n","/**\n * Direct API service for making requests directly to the backend\n * This bypasses the proxy configuration and makes requests directly to the backend\n */\n\nimport axios from 'axios';\n\n// Consolidate API URLs into a single configuration\nconst config = {\n  BACKEND_URL: 'http://double9-env.eba-wxarapmn.us-east-2.elasticbeanstalk.com',\n  API_BASE: '/api',\n  TIMEOUT: 10000\n};\n\nconst directApi = axios.create({\n  baseURL: `${config.BACKEND_URL}${config.API_BASE}`,\n  timeout: config.TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Origin': 'https://www.dash628.com'\n  }\n});\n\n// Add request interceptor for error handling\ndirectApi.interceptors.response.use(\n  response => response,\n  error => {\n    console.error('API Request failed:', error);\n    if (error.response) {\n      console.error('Response data:', error.response.data);\n      console.error('Response status:', error.response.status);\n    }\n    throw error;\n  }\n);\n\n// Whitelist Management API\nexport const getWhitelistedUsers = async () => {\n  try {\n    const response = await directApi.get('/pool/whitelist');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching whitelisted users:', error);\n    throw error;\n  }\n};\n\nexport const addToWhitelist = async (address, allocation, email) => {\n  try {\n    const response = await directApi.post('/pool/whitelist/add', {\n      address,\n      allocation,\n      email\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error adding to whitelist:', error);\n    throw error;\n  }\n};\n\nexport const bulkAddToWhitelist = async (addresses, allocation) => {\n  try {\n    const response = await directApi.post('/pool/whitelist/bulk-add', {\n      addresses,\n      allocation\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error bulk adding to whitelist:', error);\n    throw error;\n  }\n};\n\nexport const removeFromWhitelist = async (address) => {\n  try {\n    const response = await directApi.delete('/pool/whitelist/remove', {\n      data: { address }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error removing from whitelist:', error);\n    throw error;\n  }\n};\n\n// Presale API\nexport const getPresaleInfo = async () => {\n  try {\n    const response = await directApi.get('/pool/presale/info');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching presale info:', error);\n    throw error;\n  }\n};\n\nexport const getPresalePoolData = async () => {\n  try {\n    const response = await directApi.get('/pool/presale-pool-data');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching presale pool data:', error);\n    throw error;\n  }\n};\n\n// Token API\nexport const getTokenInfo = async () => {\n  try {\n    const response = await directApi.get('/pool/token-info');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching token info:', error);\n    throw error;\n  }\n};\n\nexport const getTokenBalance = async (walletAddress, tokenAddress) => {\n  try {\n    const response = await directApi.get(`/pool/token-balance/${walletAddress}`, {\n      params: { tokenAddress }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching token balance:', error);\n    throw error;\n  }\n};\n\nexport const getTransactionHistory = async (walletAddress, limit = 10) => {\n  try {\n    const response = await directApi.get(`/pool/transaction-history/${walletAddress}`, {\n      params: { limit }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching transaction history:', error);\n    throw error;\n  }\n};\n\nexport default {\n  getWhitelistedUsers,\n  addToWhitelist,\n  bulkAddToWhitelist,\n  removeFromWhitelist,\n  getPresaleInfo,\n  getPresalePoolData,\n  getTokenInfo,\n  getTokenBalance,\n  getTransactionHistory\n};\n","import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Typography, Grid, CircularProgress, Box } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport axios from 'axios';\nimport solanaApi from '../services/solanaApi';\nimport directApi from '../direct-api';\n\nconst StyledCard = styled(Card)(({ theme }) => ({\n  height: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n  borderRadius: '8px',\n  transition: 'transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out',\n  '&:hover': {\n    transform: 'translateY(-5px)',\n    boxShadow: '0 12px 20px rgba(0, 0, 0, 0.1)',\n  },\n}));\n\nconst CardTitle = styled(Typography)(({ theme }) => ({\n  fontSize: '1.1rem',\n  fontWeight: 'bold',\n  marginBottom: '8px',\n  color: '#333',\n}));\n\nconst CardValue = styled(Typography)(({ theme }) => ({\n  fontSize: '1.8rem',\n  fontWeight: 'bold',\n  color: '#1976d2',\n}));\n\nconst PresaleOverview = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [presaleData, setPresaleData] = useState({\n    totalSupply: 0,\n    tokensSold: 0,\n    tokensSoldForSol: 0,\n    tokensSoldForFiat: 0,\n    transactionsNumber: 0,\n    lastUpdated: new Date().toISOString(),\n    timeLeft: {\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    },\n    presalePoolAddress: '',\n    tokenAddress: ''\n  });\n  const [transactions, setTransactions] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // First try direct API\n        try {\n          const presaleInfo = await directApi.getPresaleInfo();\n          const blockchainData = await directApi.getPresalePoolData();\n          \n          setPresaleData({\n            ...blockchainData,\n            timeLeft: presaleInfo?.timeLeft || blockchainData.timeLeft\n          });\n          \n          const txHistory = await directApi.getTransactionHistory(\n            blockchainData.presalePoolAddress, \n            5\n          );\n          setTransactions(txHistory);\n          \n        } catch (error) {\n          console.error('Direct API failed:', error);\n          throw new Error(`API Connection failed: ${error.message}`);\n        }\n        \n      } catch (error) {\n        setError(error.message);\n        // Load fallback data\n        setPresaleData({\n          timeLeft: { days: 30, hours: 12, minutes: 45, seconds: 20 },\n          totalRaised: 0,\n          participants: 0,\n          status: 'Active'\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n\n    // Set up timer to update timeLeft\n    const timer = setInterval(() => {\n      setPresaleData(prevData => {\n        if (!prevData.timeLeft) return prevData;\n        \n        let { days, hours, minutes, seconds } = prevData.timeLeft;\n        \n        if (seconds > 0) {\n          seconds--;\n        } else {\n          seconds = 59;\n          if (minutes > 0) {\n            minutes--;\n          } else {\n            minutes = 59;\n            if (hours > 0) {\n              hours--;\n            } else {\n              hours = 23;\n              if (days > 0) {\n                days--;\n              }\n            }\n          }\n        }\n        \n        return {\n          ...prevData,\n          timeLeft: { days, hours, minutes, seconds }\n        };\n      });\n    }, 1000);\n\n    // Set up interval to refresh data from API\n    const refreshInterval = setInterval(fetchData, 5 * 60 * 1000);\n\n    return () => {\n      clearInterval(timer);\n      clearInterval(refreshInterval);\n    };\n  }, []);\n\n  const formatNumber = (num) => {\n    return (num !== undefined && num !== null) ? num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") : 'N/A';\n  };\n\n  const formatDate = (dateString) => {\n    return dateString ? new Date(dateString).toLocaleString() : 'N/A';\n  };\n\n  const formatTimeLeft = (timeLeft) => {\n    if (!timeLeft) return 'N/A';\n    return `${timeLeft.days}d ${timeLeft.hours}h ${timeLeft.minutes}m ${timeLeft.seconds}s`;\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Typography color=\"error\" variant=\"h6\">{error}</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Presale Overview\n      </Typography>\n      <Typography variant=\"subtitle1\" color=\"textSecondary\" gutterBottom>\n        Monitor the presale progress and statistics\n      </Typography>\n\n      <Grid container spacing={3} sx={{ mt: 2 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Balance\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(presaleData.totalSupply)} DPNET\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Tokens Sold\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(presaleData.tokensSold)} DPNET\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Sold for SOL\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(presaleData.tokensSoldForSol)} DPNET\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Sold for Fiat\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(presaleData.tokensSoldForFiat)} DPNET\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Transactions\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(presaleData.transactionsNumber)}\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Time Left\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatTimeLeft(presaleData.timeLeft)}\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Percent Sold\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {presaleData.totalSupply ? ((presaleData.tokensSold / presaleData.totalSupply) * 100).toFixed(2) : '0.00'}%\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                SOL vs Fiat Ratio\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {presaleData.tokensSold ? ((presaleData.tokensSoldForSol / presaleData.tokensSold) * 100).toFixed(2) : '0.00'}%\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n      </Grid>\n\n      {/* Recent Transactions Section */}\n      <Box sx={{ mt: 4 }}>\n        <Typography variant=\"h5\" gutterBottom>\n          Recent Transactions\n        </Typography>\n        \n        {transactions.length > 0 ? (\n          <Box sx={{ overflowX: 'auto' }}>\n            <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: '16px' }}>\n              <thead>\n                <tr style={{ backgroundColor: '#f5f5f5' }}>\n                  <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Signature</th>\n                  <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Time</th>\n                  <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Slot</th>\n                  <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Fee (SOL)</th>\n                  <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Status</th>\n                </tr>\n              </thead>\n              <tbody>\n                {transactions.map((tx, index) => (\n                  <tr key={index} style={{ borderBottom: '1px solid #ddd' }}>\n                    <td style={{ padding: '12px' }}>\n          <a \n            href={`https://explorer.solana.com/tx/${tx.signature}?cluster=devnet`} \n            target=\"_blank\" \n            rel=\"noopener noreferrer\"\n            style={{ color: '#1976d2', textDecoration: 'none' }}\n          >\n            {tx.signature.substring(0, 8)}...{tx.signature.substring(tx.signature.length - 8)}\n          </a>\n                    </td>\n                    <td style={{ padding: '12px' }}>{tx.blockTime ? new Date(tx.blockTime).toLocaleString() : 'N/A'}</td>\n                    <td style={{ padding: '12px' }}>{tx.slot}</td>\n                    <td style={{ padding: '12px' }}>{(tx.fee / 1000000000).toFixed(6)}</td>\n                    <td style={{ padding: '12px' }}>\n                      <span style={{ \n                        color: tx.status === 'Success' ? '#28a745' : '#dc3545',\n                        fontWeight: 'bold'\n                      }}>\n                        {tx.status}\n                      </span>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </Box>\n        ) : (\n          <Typography variant=\"body1\" color=\"textSecondary\">\n            No recent transactions found.\n          </Typography>\n        )}\n      </Box>\n\n      <Box sx={{ mt: 4 }}>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          Last updated: {formatDate(presaleData.lastUpdated)}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          Presale Pool Address: {presaleData.presalePoolAddress}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          Token Address: {presaleData.tokenAddress}\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default PresaleOverview;\n","import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Typography, Grid, CircularProgress, Box, Button, TextField, Checkbox, FormControlLabel } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport api from '../services/api';\nimport solanaApi from '../services/solanaApi';\n\nconst StyledCard = styled(Card)(({ theme }) => ({\n  height: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n  borderRadius: '8px',\n  overflow: 'hidden',\n}));\n\nconst CardHeader = styled('div')(({ theme }) => ({\n  backgroundColor: '#f8f9fa',\n  padding: '15px 20px',\n  borderBottom: '1px solid #e9ecef',\n}));\n\nconst CardTitle = styled(Typography)(({ theme }) => ({\n  margin: 0,\n  fontSize: '18px',\n  fontWeight: 600,\n}));\n\nconst CardBody = styled(CardContent)(({ theme }) => ({\n  padding: '20px',\n  flexGrow: 1,\n}));\n\nconst FormGroup = styled('div')(({ theme }) => ({\n  marginBottom: '15px',\n}));\n\nconst PresaleManagement = () => {\n  const [activeTab, setActiveTab] = useState('info');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [tokenInfo, setTokenInfo] = useState(null);\n  const [presaleParams, setPresaleParams] = useState({\n    startTime: new Date().toISOString().split('T')[0],\n    endTime: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    minPurchaseAmount: 100,\n    maxPurchaseAmount: 100000,\n    whitelistEnabled: true,\n    paused: false\n  });\n\n  // Fetch token info on component mount\n  useEffect(() => {\n    const fetchTokenInfo = async () => {\n      setLoading(true);\n      try {\n        // Try to get token info from Solana blockchain\n        const info = await solanaApi.getTokenInfo();\n        setTokenInfo(info);\n        setError(null);\n      } catch (err) {\n        console.error('Error fetching token info:', err);\n        \n        // Try to get token info from backend\n        try {\n          const backendInfo = await api.getTokenInfo();\n          setTokenInfo(backendInfo);\n          setError(null);\n        } catch (backendErr) {\n          console.error('Error fetching token info from backend:', backendErr);\n          setError('Failed to load token information. Please try again later.');\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchTokenInfo();\n  }, []);\n\n  const handleTransferTokens = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    \n    try {\n      const recipient = e.target.recipient.value;\n      const amount = parseFloat(e.target.amount.value);\n      \n      if (!recipient || !amount) {\n        throw new Error('Recipient address and amount are required');\n      }\n      \n      await api.transferTokens(recipient, amount);\n      setSuccess('Tokens transferred successfully');\n      e.target.reset();\n    } catch (err) {\n      console.error('Error transferring tokens:', err);\n      setError(err.message || 'Failed to transfer tokens');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleMintTokens = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    \n    try {\n      const recipient = e.target.mintTo.value;\n      const amount = parseFloat(e.target.mintAmount.value);\n      \n      if (!recipient || !amount) {\n        throw new Error('Recipient address and amount are required');\n      }\n      \n      await api.mintTokens(recipient, amount);\n      setSuccess('Tokens minted successfully');\n      e.target.reset();\n    } catch (err) {\n      console.error('Error minting tokens:', err);\n      setError(err.message || 'Failed to mint tokens');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleBurnTokens = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    \n    try {\n      const amount = parseFloat(e.target.burnAmount.value);\n      \n      if (!amount) {\n        throw new Error('Amount is required');\n      }\n      \n      await api.burnTokens(amount);\n      setSuccess('Tokens burned successfully');\n      e.target.reset();\n    } catch (err) {\n      console.error('Error burning tokens:', err);\n      setError(err.message || 'Failed to burn tokens');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePausePresale = async () => {\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    \n    try {\n      await api.pausePresale();\n      setPresaleParams({...presaleParams, paused: true});\n      setSuccess('Presale paused successfully');\n    } catch (err) {\n      console.error('Error pausing presale:', err);\n      setError(err.message || 'Failed to pause presale');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleResumePresale = async () => {\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    \n    try {\n      await api.resumePresale();\n      setPresaleParams({...presaleParams, paused: false});\n      setSuccess('Presale resumed successfully');\n    } catch (err) {\n      console.error('Error resuming presale:', err);\n      setError(err.message || 'Failed to resume presale');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUpdatePresaleParams = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    \n    try {\n      const startTime = e.target.startTime.value;\n      const endTime = e.target.endTime.value;\n      const minPurchaseAmount = parseFloat(e.target.minPurchaseAmount.value);\n      const maxPurchaseAmount = parseFloat(e.target.maxPurchaseAmount.value);\n      const whitelistEnabled = e.target.whitelistEnabled.checked;\n      \n      if (!startTime || !endTime || !minPurchaseAmount || !maxPurchaseAmount) {\n        throw new Error('All fields are required');\n      }\n      \n      if (new Date(startTime) >= new Date(endTime)) {\n        throw new Error('End time must be after start time');\n      }\n      \n      if (minPurchaseAmount >= maxPurchaseAmount) {\n        throw new Error('Maximum purchase amount must be greater than minimum purchase amount');\n      }\n      \n      const updatedParams = {\n        startTime,\n        endTime,\n        minPurchaseAmount,\n        maxPurchaseAmount,\n        whitelistEnabled\n      };\n      \n      await api.updatePresaleParams(updatedParams);\n      setPresaleParams({...presaleParams, ...updatedParams});\n      setSuccess('Presale parameters updated successfully');\n    } catch (err) {\n      console.error('Error updating presale parameters:', err);\n      setError(err.message || 'Failed to update presale parameters');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleWithdrawUnsoldTokens = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    \n    try {\n      const amount = parseFloat(e.target.withdrawAmount.value);\n      \n      if (!amount) {\n        throw new Error('Amount is required');\n      }\n      \n      await api.withdrawUnsoldTokens(amount);\n      setSuccess('Unsold tokens withdrawn successfully');\n      e.target.reset();\n    } catch (err) {\n      console.error('Error withdrawing unsold tokens:', err);\n      setError(err.message || 'Failed to withdraw unsold tokens');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatNumber = (num) => {\n    return num ? num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") : 'N/A';\n  };\n\n  if (loading && !tokenInfo) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Presale Management\n      </Typography>\n      <Typography variant=\"subtitle1\" color=\"textSecondary\" gutterBottom>\n        Manage presale parameters and token operations\n      </Typography>\n      \n      {loading && <Box sx={{ display: 'flex', justifyContent: 'center', my: 2 }}><CircularProgress size={24} /></Box>}\n      {error && <Box sx={{ p: 2, bgcolor: '#f8d7da', color: '#dc3545', borderRadius: 1, mb: 3 }}>{error}</Box>}\n      {success && <Box sx={{ p: 2, bgcolor: '#d4edda', color: '#28a745', borderRadius: 1, mb: 3 }}>{success}</Box>}\n      \n      <Box sx={{ mb: 3, borderBottom: '1px solid #dee2e6', display: 'flex', flexWrap: 'wrap' }}>\n        <Button \n          sx={{ \n            px: 2, \n            py: 1, \n            borderRadius: '4px 4px 0 0',\n            borderColor: activeTab === 'info' ? '#dee2e6' : 'transparent',\n            borderWidth: '1px',\n            borderStyle: 'solid',\n            borderBottomColor: activeTab === 'info' ? 'transparent' : '#dee2e6',\n            bgcolor: activeTab === 'info' ? '#fff' : 'transparent',\n            '&:hover': {\n              bgcolor: activeTab === 'info' ? '#fff' : '#f8f9fa',\n            }\n          }}\n          onClick={() => setActiveTab('info')}\n        >\n          Token Info\n        </Button>\n        <Button \n          sx={{ \n            px: 2, \n            py: 1, \n            borderRadius: '4px 4px 0 0',\n            borderColor: activeTab === 'transfer' ? '#dee2e6' : 'transparent',\n            borderWidth: '1px',\n            borderStyle: 'solid',\n            borderBottomColor: activeTab === 'transfer' ? 'transparent' : '#dee2e6',\n            bgcolor: activeTab === 'transfer' ? '#fff' : 'transparent',\n            '&:hover': {\n              bgcolor: activeTab === 'transfer' ? '#fff' : '#f8f9fa',\n            }\n          }}\n          onClick={() => setActiveTab('transfer')}\n        >\n          Transfer Tokens\n        </Button>\n        <Button \n          sx={{ \n            px: 2, \n            py: 1, \n            borderRadius: '4px 4px 0 0',\n            borderColor: activeTab === 'mint' ? '#dee2e6' : 'transparent',\n            borderWidth: '1px',\n            borderStyle: 'solid',\n            borderBottomColor: activeTab === 'mint' ? 'transparent' : '#dee2e6',\n            bgcolor: activeTab === 'mint' ? '#fff' : 'transparent',\n            '&:hover': {\n              bgcolor: activeTab === 'mint' ? '#fff' : '#f8f9fa',\n            }\n          }}\n          onClick={() => setActiveTab('mint')}\n        >\n          Mint Tokens\n        </Button>\n        <Button \n          sx={{ \n            px: 2, \n            py: 1, \n            borderRadius: '4px 4px 0 0',\n            borderColor: activeTab === 'burn' ? '#dee2e6' : 'transparent',\n            borderWidth: '1px',\n            borderStyle: 'solid',\n            borderBottomColor: activeTab === 'burn' ? 'transparent' : '#dee2e6',\n            bgcolor: activeTab === 'burn' ? '#fff' : 'transparent',\n            '&:hover': {\n              bgcolor: activeTab === 'burn' ? '#fff' : '#f8f9fa',\n            }\n          }}\n          onClick={() => setActiveTab('burn')}\n        >\n          Burn Tokens\n        </Button>\n        <Button \n          sx={{ \n            px: 2, \n            py: 1, \n            borderRadius: '4px 4px 0 0',\n            borderColor: activeTab === 'presale' ? '#dee2e6' : 'transparent',\n            borderWidth: '1px',\n            borderStyle: 'solid',\n            borderBottomColor: activeTab === 'presale' ? 'transparent' : '#dee2e6',\n            bgcolor: activeTab === 'presale' ? '#fff' : 'transparent',\n            '&:hover': {\n              bgcolor: activeTab === 'presale' ? '#fff' : '#f8f9fa',\n            }\n          }}\n          onClick={() => setActiveTab('presale')}\n        >\n          Presale Controls\n        </Button>\n        <Button \n          sx={{ \n            px: 2, \n            py: 1, \n            borderRadius: '4px 4px 0 0',\n            borderColor: activeTab === 'withdraw' ? '#dee2e6' : 'transparent',\n            borderWidth: '1px',\n            borderStyle: 'solid',\n            borderBottomColor: activeTab === 'withdraw' ? 'transparent' : '#dee2e6',\n            bgcolor: activeTab === 'withdraw' ? '#fff' : 'transparent',\n            '&:hover': {\n              bgcolor: activeTab === 'withdraw' ? '#fff' : '#f8f9fa',\n            }\n          }}\n          onClick={() => setActiveTab('withdraw')}\n        >\n          Withdraw Tokens\n        </Button>\n      </Box>\n\n      <Box sx={{ mt: 3 }}>\n        {activeTab === 'info' && tokenInfo && (\n          <StyledCard>\n            <CardHeader>\n              <CardTitle>DPNET-10 Token Information</CardTitle>\n            </CardHeader>\n            <CardBody>\n              <Grid container spacing={2}>\n                <Grid item xs={12} md={6}>\n                  <Box sx={{ mb: 2 }}>\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">Token Name</Typography>\n                    <Typography variant=\"body1\">{tokenInfo.name}</Typography>\n                  </Box>\n                  <Box sx={{ mb: 2 }}>\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">Token Symbol</Typography>\n                    <Typography variant=\"body1\">{tokenInfo.symbol}</Typography>\n                  </Box>\n                  <Box sx={{ mb: 2 }}>\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">Decimals</Typography>\n                    <Typography variant=\"body1\">{tokenInfo.decimals}</Typography>\n                  </Box>\n                  <Box sx={{ mb: 2 }}>\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">Total Supply</Typography>\n                    <Typography variant=\"body1\">{formatNumber(tokenInfo.totalSupply)} DPNET</Typography>\n                  </Box>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Box sx={{ mb: 2 }}>\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">Circulating Supply</Typography>\n                    <Typography variant=\"body1\">{formatNumber(tokenInfo.circulatingSupply)} DPNET</Typography>\n                  </Box>\n                  <Box sx={{ mb: 2 }}>\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">Token Address</Typography>\n                    <Typography variant=\"body1\" sx={{ wordBreak: 'break-all' }}>{tokenInfo.address}</Typography>\n                  </Box>\n                  <Box sx={{ mb: 2 }}>\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">Mint Authority</Typography>\n                    <Typography variant=\"body1\">{tokenInfo.mintAuthority ? 'Enabled' : 'Disabled'}</Typography>\n                  </Box>\n                  <Box sx={{ mb: 2 }}>\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">Freeze Authority</Typography>\n                    <Typography variant=\"body1\">{tokenInfo.freezeAuthority ? 'Enabled' : 'Disabled'}</Typography>\n                  </Box>\n                </Grid>\n              </Grid>\n            </CardBody>\n          </StyledCard>\n        )}\n\n        {activeTab === 'transfer' && (\n          <StyledCard>\n            <CardHeader>\n              <CardTitle>Transfer Tokens</CardTitle>\n            </CardHeader>\n            <CardBody>\n              <form onSubmit={handleTransferTokens}>\n                <FormGroup>\n                  <Typography variant=\"subtitle2\" gutterBottom>Recipient Address</Typography>\n                  <TextField \n                    id=\"recipient\" \n                    fullWidth \n                    placeholder=\"Enter Solana wallet address\" \n                    variant=\"outlined\"\n                    size=\"small\"\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Typography variant=\"subtitle2\" gutterBottom>Amount</Typography>\n                  <TextField \n                    id=\"amount\" \n                    type=\"number\" \n                    fullWidth \n                    placeholder=\"Enter amount to transfer\" \n                    variant=\"outlined\"\n                    size=\"small\"\n                  />\n                </FormGroup>\n                <Button \n                  type=\"submit\" \n                  variant=\"contained\" \n                  color=\"primary\" \n                  disabled={loading}\n                  sx={{ mt: 2 }}\n                >\n                  {loading ? 'Processing...' : 'Transfer Tokens'}\n                </Button>\n              </form>\n            </CardBody>\n          </StyledCard>\n        )}\n\n        {activeTab === 'mint' && (\n          <StyledCard>\n            <CardHeader>\n              <CardTitle>Mint New Tokens</CardTitle>\n            </CardHeader>\n            <CardBody>\n              <form onSubmit={handleMintTokens}>\n                <FormGroup>\n                  <Typography variant=\"subtitle2\" gutterBottom>Recipient Address</Typography>\n                  <TextField \n                    id=\"mintTo\" \n                    fullWidth \n                    placeholder=\"Enter Solana wallet address\" \n                    variant=\"outlined\"\n                    size=\"small\"\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Typography variant=\"subtitle2\" gutterBottom>Amount</Typography>\n                  <TextField \n                    id=\"mintAmount\" \n                    type=\"number\" \n                    fullWidth \n                    placeholder=\"Enter amount to mint\" \n                    variant=\"outlined\"\n                    size=\"small\"\n                  />\n                </FormGroup>\n                <Button \n                  type=\"submit\" \n                  variant=\"contained\" \n                  color=\"primary\" \n                  disabled={loading}\n                  sx={{ mt: 2 }}\n                >\n                  {loading ? 'Processing...' : 'Mint Tokens'}\n                </Button>\n              </form>\n            </CardBody>\n          </StyledCard>\n        )}\n\n        {activeTab === 'burn' && (\n          <StyledCard>\n            <CardHeader>\n              <CardTitle>Burn Tokens</CardTitle>\n            </CardHeader>\n            <CardBody>\n              <form onSubmit={handleBurnTokens}>\n                <FormGroup>\n                  <Typography variant=\"subtitle2\" gutterBottom>Amount</Typography>\n                  <TextField \n                    id=\"burnAmount\" \n                    type=\"number\" \n                    fullWidth \n                    placeholder=\"Enter amount to burn\" \n                    variant=\"outlined\"\n                    size=\"small\"\n                  />\n                </FormGroup>\n                <Button \n                  type=\"submit\" \n                  variant=\"contained\" \n                  color=\"error\" \n                  disabled={loading}\n                  sx={{ mt: 2 }}\n                >\n                  {loading ? 'Processing...' : 'Burn Tokens'}\n                </Button>\n              </form>\n            </CardBody>\n          </StyledCard>\n        )}\n\n        {activeTab === 'presale' && (\n          <StyledCard>\n            <CardHeader>\n              <CardTitle>Presale Controls</CardTitle>\n            </CardHeader>\n            <CardBody>\n              <Box sx={{ mb: 3 }}>\n                <Typography variant=\"h6\" gutterBottom>Current Status: {presaleParams.paused ? 'Paused' : 'Active'}</Typography>\n                <Box sx={{ display: 'flex', gap: 2 }}>\n                  <Button \n                    variant=\"contained\" \n                    color=\"warning\" \n                    onClick={handlePausePresale} \n                    disabled={loading || presaleParams.paused}\n                  >\n                    Pause Presale\n                  </Button>\n                  <Button \n                    variant=\"contained\" \n                    color=\"success\" \n                    onClick={handleResumePresale} \n                    disabled={loading || !presaleParams.paused}\n                  >\n                    Resume Presale\n                  </Button>\n                </Box>\n              </Box>\n\n              <Box sx={{ borderTop: '1px solid #e9ecef', pt: 3 }}>\n                <Typography variant=\"h6\" gutterBottom>Update Presale Parameters</Typography>\n                <form onSubmit={handleUpdatePresaleParams}>\n                  <FormGroup>\n                    <Typography variant=\"subtitle2\" gutterBottom>Start Time</Typography>\n                    <TextField \n                      id=\"startTime\" \n                      type=\"date\" \n                      fullWidth \n                      value={presaleParams.startTime}\n                      onChange={(e) => setPresaleParams({...presaleParams, startTime: e.target.value})}\n                      variant=\"outlined\"\n                      size=\"small\"\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Typography variant=\"subtitle2\" gutterBottom>End Time</Typography>\n                    <TextField \n                      id=\"endTime\" \n                      type=\"date\" \n                      fullWidth \n                      value={presaleParams.endTime}\n                      onChange={(e) => setPresaleParams({...presaleParams, endTime: e.target.value})}\n                      variant=\"outlined\"\n                      size=\"small\"\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Typography variant=\"subtitle2\" gutterBottom>Minimum Purchase Amount</Typography>\n                    <TextField \n                      id=\"minPurchaseAmount\" \n                      type=\"number\" \n                      fullWidth \n                      value={presaleParams.minPurchaseAmount}\n                      onChange={(e) => setPresaleParams({...presaleParams, minPurchaseAmount: parseFloat(e.target.value)})}\n                      variant=\"outlined\"\n                      size=\"small\"\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Typography variant=\"subtitle2\" gutterBottom>Maximum Purchase Amount</Typography>\n                    <TextField \n                      id=\"maxPurchaseAmount\" \n                      type=\"number\" \n                      fullWidth \n                      value={presaleParams.maxPurchaseAmount}\n                      onChange={(e) => setPresaleParams({...presaleParams, maxPurchaseAmount: parseFloat(e.target.value)})}\n                      variant=\"outlined\"\n                      size=\"small\"\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          id=\"whitelistEnabled\"\n                          checked={presaleParams.whitelistEnabled}\n                          onChange={(e) => setPresaleParams({...presaleParams, whitelistEnabled: e.target.checked})}\n                        />\n                      }\n                      label=\"Enable Whitelist\"\n                    />\n                  </FormGroup>\n                  <Button \n                    type=\"submit\" \n                    variant=\"contained\" \n                    color=\"primary\" \n                    disabled={loading}\n                    sx={{ mt: 2 }}\n                  >\n                    {loading ? 'Updating...' : 'Update Parameters'}\n                  </Button>\n                </form>\n              </Box>\n            </CardBody>\n          </StyledCard>\n        )}\n\n        {activeTab === 'withdraw' && (\n          <StyledCard>\n            <CardHeader>\n              <CardTitle>Withdraw Unsold Tokens</CardTitle>\n            </CardHeader>\n            <CardBody>\n              <Box sx={{ p: 2, bgcolor: '#fff3cd', color: '#856404', borderRadius: 1, mb: 3 }}>\n                <Typography variant=\"body1\"><strong>Note:</strong> You can only withdraw unsold tokens after the presale has ended.</Typography>\n              </Box>\n              <form onSubmit={handleWithdrawUnsoldTokens}>\n                <FormGroup>\n                  <Typography variant=\"subtitle2\" gutterBottom>Amount</Typography>\n                  <TextField \n                    id=\"withdrawAmount\" \n                    type=\"number\" \n                    fullWidth \n                    placeholder=\"Enter amount to withdraw\" \n                    variant=\"outlined\"\n                    size=\"small\"\n                  />\n                </FormGroup>\n                <Button \n                  type=\"submit\" \n                  variant=\"contained\" \n                  color=\"primary\" \n                  disabled={loading}\n                  sx={{ mt: 2 }}\n                >\n                  {loading ? 'Processing...' : 'Withdraw Tokens'}\n                </Button>\n              </form>\n            </CardBody>\n          </StyledCard>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default PresaleManagement;\n","import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Typography, Grid, CircularProgress, Box, Button, TextField, Checkbox, FormControlLabel } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport api from '../services/api';\nimport solanaApi from '../services/solanaApi';\nimport directApi from '../direct-api';\n\nconst StyledCard = styled(Card)(({ theme }) => ({\n  height: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n  borderRadius: '8px',\n  overflow: 'hidden',\n}));\n\nconst CardHeader = styled('div')(({ theme }) => ({\n  backgroundColor: '#f8f9fa',\n  padding: '15px 20px',\n  borderBottom: '1px solid #e9ecef',\n}));\n\nconst CardTitle = styled(Typography)(({ theme }) => ({\n  margin: 0,\n  fontSize: '18px',\n  fontWeight: 600,\n}));\n\nconst CardBody = styled(CardContent)(({ theme }) => ({\n  padding: '20px',\n  flexGrow: 1,\n}));\n\nconst FormGroup = styled('div')(({ theme }) => ({\n  marginBottom: '15px',\n}));\n\nconst WhitelistManagement = () => {\n  const [activeTab, setActiveTab] = useState('add');\n  const [whitelistedUsers, setWhitelistedUsers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [addressToDelete, setAddressToDelete] = useState(null);\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filteredUsers, setFilteredUsers] = useState([]);\n  const [showMultiDeleteConfirmation, setShowMultiDeleteConfirmation] = useState(false);\n\n  // Fetch whitelisted users from the API\n  useEffect(() => {\n    const fetchWhitelistedUsers = async () => {\n      setLoading(true);\n      try {\n        // Try multiple approaches to get the data\n        let data = null;\n        let errorMessage = null;\n        \n        // First try the direct API (bypassing proxy)\n        try {\n          console.log('Fetching whitelist data using directApi...');\n          data = await directApi.getWhitelistedUsers();\n          console.log('Direct API success:', data);\n          setWhitelistedUsers(data);\n          setError(null);\n          return; // Exit early if successful\n        } catch (directErr) {\n          console.error('Error with directApi connection:', directErr);\n          errorMessage = 'Direct API failed: ' + directErr.message;\n        }\n        \n        // Then try solanaApi\n        try {\n          console.log('Fetching token info using solanaApi...');\n          await solanaApi.getTokenInfo();\n          \n          // If the above succeeds, then try the regular API\n          console.log('SolanaApi connection successful, fetching whitelist data using api...');\n          data = await api.getWhitelistedUsers();\n          console.log('Regular API success:', data);\n          setWhitelistedUsers(data);\n          setError(null);\n          return; // Exit early if successful\n        } catch (solanaErr) {\n          console.error('Error with solanaApi connection:', solanaErr);\n          errorMessage = errorMessage + ', SolanaApi failed: ' + solanaErr.message;\n          \n          // If solanaApi fails, try the regular API directly\n          try {\n            console.log('Trying regular API call for whitelist data...');\n            data = await api.getWhitelistedUsers();\n            console.log('Regular API success:', data);\n            setWhitelistedUsers(data);\n            setError(null);\n            return; // Exit early if successful\n          } catch (apiErr) {\n            console.error('Error with regular API connection:', apiErr);\n            errorMessage = errorMessage + ', Regular API failed: ' + apiErr.message;\n          }\n        }\n        \n        // If we get here, all API attempts failed\n        throw new Error(errorMessage);\n      } catch (err) {\n        console.error('All API attempts failed:', err);\n        // Use mock data if all API attempts fail\n        setWhitelistedUsers([\n          { id: 1, address: '7XSvJnS19TodrQJSbjUR3NLSZoK3mHvfGqVhxJQRPvTb', email: 'user1@example.com', dateAdded: '2025-03-01', status: 'Active' },\n          { id: 2, address: '9XyQMkZG8Ro7BKYYPCe9Xvjrv8uLZMGZwGhVJZFwBvU9', email: 'user2@example.com', dateAdded: '2025-03-02', status: 'Active' },\n          { id: 3, address: 'FdYsNj3jhGLcCzoMLA2KZdzUnM3UiwCYUNhMmmFaUDie', email: 'user3@example.com', dateAdded: '2025-03-03', status: 'Active' },\n          { id: 4, address: '3HUwa6YYKNdDgsU6nkkMWyBgT2BRtzmD1JpWSg77sa55', email: 'user4@example.com', dateAdded: '2025-03-04', status: 'Active' },\n        ]);\n        setError('Using local data. API connection failed.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchWhitelistedUsers();\n  }, []);\n\n  // Filter users based on search term\n  useEffect(() => {\n    if (searchTerm.trim() === '') {\n      setFilteredUsers(whitelistedUsers);\n    } else {\n      const lowercasedSearch = searchTerm.toLowerCase();\n      const filtered = whitelistedUsers.filter(user => \n        user.address.toLowerCase().includes(lowercasedSearch) || \n        user.email.toLowerCase().includes(lowercasedSearch)\n      );\n      setFilteredUsers(filtered);\n    }\n  }, [searchTerm, whitelistedUsers]);\n\n  const handleAddUser = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    \n    try {\n      const address = e.target.walletAddress.value;\n      const email = e.target.email.value;\n      \n      if (!address) {\n        throw new Error('Wallet address is required');\n      }\n      \n      // Validate Solana address format\n      if (!address.match(/^[1-9A-HJ-NP-Za-km-z]{32,44}$/)) {\n        throw new Error('Invalid Solana wallet address format');\n      }\n      \n      // Add to whitelist via API\n      await api.addToWhitelist(address, 0, email);\n      \n      // Fetch updated whitelist to refresh the data\n      const updatedWhitelist = await api.getWhitelistedUsers();\n      setWhitelistedUsers(updatedWhitelist);\n      \n      setSuccess('User added to whitelist successfully');\n      e.target.reset();\n    } catch (err) {\n      console.error('Error adding user to whitelist:', err);\n      setError(err.message || 'Failed to add user to whitelist');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleBulkAdd = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    \n    try {\n      const addressesText = e.target.addresses.value;\n      \n      if (!addressesText) {\n        throw new Error('Wallet addresses are required');\n      }\n      \n      const addresses = addressesText.split('\\n').filter(address => address.trim() !== '');\n      \n      if (addresses.length === 0) {\n        throw new Error('No valid wallet addresses found');\n      }\n      \n      // Validate Solana addresses\n      const invalidAddresses = addresses.filter(address => !address.match(/^[1-9A-HJ-NP-Za-km-z]{32,44}$/));\n      if (invalidAddresses.length > 0) {\n        throw new Error(`Invalid Solana wallet address format: ${invalidAddresses[0]}${invalidAddresses.length > 1 ? ` and ${invalidAddresses.length - 1} more` : ''}`);\n      }\n      \n      // Bulk add to whitelist via API\n      await api.bulkAddToWhitelist(addresses, 0);\n      \n      // Fetch updated whitelist to refresh the data\n      const updatedWhitelist = await api.getWhitelistedUsers();\n      setWhitelistedUsers(updatedWhitelist);\n      \n      setSuccess(`${addresses.length} users added to whitelist successfully`);\n      e.target.reset();\n    } catch (err) {\n      console.error('Error bulk adding users to whitelist:', err);\n      setError(err.message || 'Failed to bulk add users to whitelist');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteUser = (id) => {\n    setAddressToDelete(id);\n    setShowConfirmation(true);\n  };\n\n  const confirmDelete = async () => {\n    setLoading(true);\n    try {\n      const userToDelete = whitelistedUsers.find(user => user.id === addressToDelete);\n      \n      if (!userToDelete) {\n        throw new Error('User not found');\n      }\n      \n      // Remove from whitelist via API\n      await api.removeFromWhitelist(userToDelete.address);\n      \n      // Fetch updated whitelist to refresh the data\n      const updatedWhitelist = await api.getWhitelistedUsers();\n      setWhitelistedUsers(updatedWhitelist);\n      \n      setSuccess('User removed from whitelist successfully');\n    } catch (err) {\n      console.error('Error removing user from whitelist:', err);\n      setError(err.message || 'Failed to remove user from whitelist');\n    } finally {\n      setShowConfirmation(false);\n      setAddressToDelete(null);\n      setLoading(false);\n    }\n  };\n\n  const cancelDelete = () => {\n    setShowConfirmation(false);\n    setAddressToDelete(null);\n  };\n\n  const handleSelectUser = (id) => {\n    if (selectedUsers.includes(id)) {\n      setSelectedUsers(selectedUsers.filter(userId => userId !== id));\n    } else {\n      setSelectedUsers([...selectedUsers, id]);\n    }\n  };\n\n  const handleSelectAll = () => {\n    if (selectedUsers.length === filteredUsers.length) {\n      setSelectedUsers([]);\n    } else {\n      setSelectedUsers(filteredUsers.map(user => user.id));\n    }\n  };\n\n  const handleDeleteSelected = () => {\n    if (selectedUsers.length === 0) {\n      setError('No users selected');\n      return;\n    }\n    \n    setShowMultiDeleteConfirmation(true);\n  };\n\n  const confirmMultiDelete = async () => {\n    setLoading(true);\n    try {\n      // Remove from whitelist via API\n      for (const id of selectedUsers) {\n        const userToDelete = whitelistedUsers.find(user => user.id === id);\n        if (userToDelete) {\n          await api.removeFromWhitelist(userToDelete.address);\n        }\n      }\n      \n      // Fetch updated whitelist to refresh the data\n      const updatedWhitelist = await api.getWhitelistedUsers();\n      setWhitelistedUsers(updatedWhitelist);\n      \n      setSuccess(`${selectedUsers.length} users removed from whitelist successfully`);\n      setSelectedUsers([]);\n    } catch (err) {\n      console.error('Error removing users from whitelist:', err);\n      setError(err.message || 'Failed to remove users from whitelist');\n    } finally {\n      setShowMultiDeleteConfirmation(false);\n      setLoading(false);\n    }\n  };\n\n  const cancelMultiDelete = () => {\n    setShowMultiDeleteConfirmation(false);\n  };\n\n  if (loading && whitelistedUsers.length === 0) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Whitelist Management\n      </Typography>\n      <Typography variant=\"subtitle1\" color=\"textSecondary\" gutterBottom>\n        Manage whitelisted addresses for presale participation\n      </Typography>\n      \n      {loading && <Box sx={{ display: 'flex', justifyContent: 'center', my: 2 }}><CircularProgress size={24} /></Box>}\n      {error && <Box sx={{ p: 2, bgcolor: '#f8d7da', color: '#dc3545', borderRadius: 1, mb: 3 }}>{error}</Box>}\n      {success && <Box sx={{ p: 2, bgcolor: '#d4edda', color: '#28a745', borderRadius: 1, mb: 3 }}>{success}</Box>}\n      \n      <Box sx={{ mb: 3, borderBottom: '1px solid #dee2e6', display: 'flex', flexWrap: 'wrap' }}>\n        <Button \n          sx={{ \n            px: 2, \n            py: 1, \n            borderRadius: '4px 4px 0 0',\n            borderColor: activeTab === 'add' ? '#dee2e6' : 'transparent',\n            borderWidth: '1px',\n            borderStyle: 'solid',\n            borderBottomColor: activeTab === 'add' ? 'transparent' : '#dee2e6',\n            bgcolor: activeTab === 'add' ? '#fff' : 'transparent',\n            '&:hover': {\n              bgcolor: activeTab === 'add' ? '#fff' : '#f8f9fa',\n            }\n          }}\n          onClick={() => setActiveTab('add')}\n        >\n          Add Single User\n        </Button>\n        <Button \n          sx={{ \n            px: 2, \n            py: 1, \n            borderRadius: '4px 4px 0 0',\n            borderColor: activeTab === 'bulk' ? '#dee2e6' : 'transparent',\n            borderWidth: '1px',\n            borderStyle: 'solid',\n            borderBottomColor: activeTab === 'bulk' ? 'transparent' : '#dee2e6',\n            bgcolor: activeTab === 'bulk' ? '#fff' : 'transparent',\n            '&:hover': {\n              bgcolor: activeTab === 'bulk' ? '#fff' : '#f8f9fa',\n            }\n          }}\n          onClick={() => setActiveTab('bulk')}\n        >\n          Bulk Add Users\n        </Button>\n        <Button \n          sx={{ \n            px: 2, \n            py: 1, \n            borderRadius: '4px 4px 0 0',\n            borderColor: activeTab === 'manage' ? '#dee2e6' : 'transparent',\n            borderWidth: '1px',\n            borderStyle: 'solid',\n            borderBottomColor: activeTab === 'manage' ? 'transparent' : '#dee2e6',\n            bgcolor: activeTab === 'manage' ? '#fff' : 'transparent',\n            '&:hover': {\n              bgcolor: activeTab === 'manage' ? '#fff' : '#f8f9fa',\n            }\n          }}\n          onClick={() => setActiveTab('manage')}\n        >\n          Manage Whitelist\n        </Button>\n      </Box>\n\n      <Box sx={{ mt: 3 }}>\n        {activeTab === 'add' && (\n          <StyledCard>\n            <CardHeader>\n              <CardTitle>Add User to Whitelist</CardTitle>\n            </CardHeader>\n            <CardBody>\n              <form onSubmit={handleAddUser}>\n                <FormGroup>\n                  <Typography variant=\"subtitle2\" gutterBottom>Wallet Address</Typography>\n                  <TextField \n                    id=\"walletAddress\" \n                    fullWidth \n                    placeholder=\"Enter Solana wallet address\" \n                    variant=\"outlined\"\n                    size=\"small\"\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Typography variant=\"subtitle2\" gutterBottom>Email Address</Typography>\n                  <TextField \n                    id=\"email\" \n                    type=\"email\" \n                    fullWidth \n                    placeholder=\"Enter email address\" \n                    variant=\"outlined\"\n                    size=\"small\"\n                  />\n                </FormGroup>\n                <Button \n                  type=\"submit\" \n                  variant=\"contained\" \n                  color=\"primary\" \n                  disabled={loading}\n                  sx={{ mt: 2 }}\n                >\n                  {loading ? 'Adding...' : 'Add to Whitelist'}\n                </Button>\n              </form>\n            </CardBody>\n          </StyledCard>\n        )}\n\n        {activeTab === 'bulk' && (\n          <StyledCard>\n            <CardHeader>\n              <CardTitle>Bulk Add Users</CardTitle>\n            </CardHeader>\n            <CardBody>\n              <form onSubmit={handleBulkAdd}>\n                <FormGroup>\n                  <Typography variant=\"subtitle2\" gutterBottom>Wallet Addresses (one per line)</Typography>\n                  <TextField \n                    id=\"addresses\" \n                    multiline \n                    rows={10} \n                    fullWidth \n                    placeholder=\"Enter wallet addresses, one per line\" \n                    variant=\"outlined\"\n                    size=\"small\"\n                  />\n                </FormGroup>\n                <Button \n                  type=\"submit\" \n                  variant=\"contained\" \n                  color=\"primary\" \n                  disabled={loading}\n                  sx={{ mt: 2 }}\n                >\n                  {loading ? 'Adding...' : 'Add All to Whitelist'}\n                </Button>\n              </form>\n            </CardBody>\n          </StyledCard>\n        )}\n\n        {activeTab === 'manage' && (\n          <StyledCard>\n            <CardHeader>\n              <CardTitle>Manage Whitelist</CardTitle>\n            </CardHeader>\n            <CardBody>\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3, flexWrap: 'wrap', gap: 2 }}>\n                <TextField \n                  placeholder=\"Search by wallet address or email\" \n                  variant=\"outlined\"\n                  size=\"small\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  sx={{ flexGrow: 1, maxWidth: '500px' }}\n                />\n                <Button \n                  variant=\"contained\" \n                  color=\"error\" \n                  onClick={handleDeleteSelected}\n                  disabled={selectedUsers.length === 0 || loading}\n                >\n                  Remove Selected\n                </Button>\n              </Box>\n              \n              <Box sx={{ overflowX: 'auto' }}>\n                <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n                  <thead>\n                    <tr style={{ backgroundColor: '#f5f5f5' }}>\n                      <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>\n                        <Checkbox \n                          checked={selectedUsers.length === filteredUsers.length && filteredUsers.length > 0}\n                          onChange={handleSelectAll}\n                          disabled={filteredUsers.length === 0}\n                        />\n                      </th>\n                      <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Wallet Address</th>\n                      <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Email Address</th>\n                      <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Date Added</th>\n                      <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Status</th>\n                      <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filteredUsers.length === 0 ? (\n                      <tr>\n                        <td colSpan=\"6\" style={{ padding: '12px', textAlign: 'center', borderBottom: '1px solid #ddd' }}>\n                          {searchTerm ? 'No matching users found' : 'No users in whitelist'}\n                        </td>\n                      </tr>\n                    ) : (\n                      filteredUsers.map(user => (\n                        <tr key={user.id} style={{ borderBottom: '1px solid #ddd' }}>\n                          <td style={{ padding: '12px' }}>\n                            <Checkbox \n                              checked={selectedUsers.includes(user.id)}\n                              onChange={() => handleSelectUser(user.id)}\n                            />\n                          </td>\n                          <td style={{ padding: '12px' }}>{user.address}</td>\n                          <td style={{ padding: '12px' }}>{user.email}</td>\n                          <td style={{ padding: '12px' }}>{user.dateAdded}</td>\n                          <td style={{ padding: '12px' }}>\n                            <Box sx={{ \n                              display: 'inline-block', \n                              px: 1, \n                              py: 0.5, \n                              borderRadius: '4px', \n                              bgcolor: user.status === 'Active' ? '#d4edda' : '#f8d7da',\n                              color: user.status === 'Active' ? '#28a745' : '#dc3545'\n                            }}>\n                              {user.status}\n                            </Box>\n                          </td>\n                          <td style={{ padding: '12px' }}>\n                            <Button \n                              variant=\"contained\" \n                              color=\"error\" \n                              size=\"small\"\n                              onClick={() => handleDeleteUser(user.id)}\n                              disabled={loading}\n                            >\n                              Remove\n                            </Button>\n                          </td>\n                        </tr>\n                      ))\n                    )}\n                  </tbody>\n                </table>\n              </Box>\n            </CardBody>\n          </StyledCard>\n        )}\n      </Box>\n\n      {/* Confirmation Modal for Single Delete */}\n      {showConfirmation && (\n        <Box sx={{\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          bgcolor: 'rgba(0, 0, 0, 0.5)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          zIndex: 1300,\n        }}>\n          <Box sx={{\n            bgcolor: 'white',\n            borderRadius: '8px',\n            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n            width: '100%',\n            maxWidth: '500px',\n            p: 0,\n            overflow: 'hidden',\n          }}>\n            <Box sx={{ bgcolor: '#f8f9fa', p: 2, borderBottom: '1px solid #dee2e6' }}>\n              <Typography variant=\"h6\">Confirm Removal</Typography>\n            </Box>\n            <Box sx={{ p: 3 }}>\n              <Typography variant=\"body1\">Are you sure you want to remove this address from the whitelist?</Typography>\n            </Box>\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', p: 2, borderTop: '1px solid #dee2e6' }}>\n              <Button \n                variant=\"outlined\" \n                onClick={cancelDelete} \n                disabled={loading}\n                sx={{ mr: 1 }}\n              >\n                Cancel\n              </Button>\n              <Button \n                variant=\"contained\" \n                color=\"error\" \n                onClick={confirmDelete} \n                disabled={loading}\n              >\n                {loading ? 'Removing...' : 'Remove'}\n              </Button>\n            </Box>\n          </Box>\n        </Box>\n      )}\n\n      {/* Confirmation Modal for Multiple Delete */}\n      {showMultiDeleteConfirmation && (\n        <Box sx={{\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          bgcolor: 'rgba(0, 0, 0, 0.5)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          zIndex: 1300,\n        }}>\n          <Box sx={{\n            bgcolor: 'white',\n            borderRadius: '8px',\n            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n            width: '100%',\n            maxWidth: '500px',\n            p: 0,\n            overflow: 'hidden',\n          }}>\n            <Box sx={{ bgcolor: '#f8f9fa', p: 2, borderBottom: '1px solid #dee2e6' }}>\n              <Typography variant=\"h6\">Confirm Multiple Removal</Typography>\n            </Box>\n            <Box sx={{ p: 3 }}>\n              <Typography variant=\"body1\">Are you sure you want to remove {selectedUsers.length} addresses from the whitelist?</Typography>\n            </Box>\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', p: 2, borderTop: '1px solid #dee2e6' }}>\n              <Button \n                variant=\"outlined\" \n                onClick={cancelMultiDelete} \n                disabled={loading}\n                sx={{ mr: 1 }}\n              >\n                Cancel\n              </Button>\n              <Button \n                variant=\"contained\" \n                color=\"error\" \n                onClick={confirmMultiDelete} \n                disabled={loading}\n              >\n                {loading ? 'Removing...' : 'Remove All'}\n              </Button>\n            </Box>\n          </Box>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default WhitelistManagement;\n","import React, { useState } from 'react';\n\nconst TestingTools = () => {\n  const [activeTab, setActiveTab] = useState('token');\n  const [testResults, setTestResults] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const runTokenTests = () => {\n    setIsLoading(true);\n    // Simulate API call to run token tests\n    setTimeout(() => {\n      setTestResults({\n        success: true,\n        tests: [\n          { name: 'Token Metadata Test', status: 'passed', message: 'Token metadata is valid' },\n          { name: 'Token Supply Test', status: 'passed', message: 'Token supply matches expected value' },\n          { name: 'Token Transfer Test', status: 'passed', message: 'Token transfer functionality works correctly' },\n          { name: 'Token Mint Test', status: 'passed', message: 'Token minting functionality works correctly' },\n          { name: 'Token Burn Test', status: 'passed', message: 'Token burning functionality works correctly' }\n        ]\n      });\n      setIsLoading(false);\n    }, 2000);\n  };\n\n  const runDynamoDBTests = () => {\n    setIsLoading(true);\n    // Simulate API call to run DynamoDB tests\n    setTimeout(() => {\n      setTestResults({\n        success: true,\n        tests: [\n          { name: 'DynamoDB Connection Test', status: 'passed', message: 'Successfully connected to DynamoDB' },\n          { name: 'Wallet Table Test', status: 'passed', message: 'Wallet table operations working correctly' },\n          { name: 'Transaction Table Test', status: 'passed', message: 'Transaction table operations working correctly' },\n          { name: 'Metadata Table Test', status: 'passed', message: 'Metadata table operations working correctly' },\n          { name: 'Query Performance Test', status: 'warning', message: 'Query performance could be improved' }\n        ]\n      });\n      setIsLoading(false);\n    }, 2000);\n  };\n\n  const runRDSTests = () => {\n    setIsLoading(true);\n    // Simulate API call to run RDS tests\n    setTimeout(() => {\n      setTestResults({\n        success: true,\n        tests: [\n          { name: 'RDS Connection Test', status: 'passed', message: 'Successfully connected to RDS' },\n          { name: 'User Table Test', status: 'passed', message: 'User table operations working correctly' },\n          { name: 'Presale Table Test', status: 'passed', message: 'Presale table operations working correctly' },\n          { name: 'Token Info Table Test', status: 'passed', message: 'Token info table operations working correctly' },\n          { name: 'Join Query Test', status: 'passed', message: 'Join queries working correctly' }\n        ]\n      });\n      setIsLoading(false);\n    }, 2000);\n  };\n\n  const runSolanaTests = () => {\n    setIsLoading(true);\n    // Simulate API call to run Solana integration tests\n    setTimeout(() => {\n      setTestResults({\n        success: true,\n        tests: [\n          { name: 'Solana Connection Test', status: 'passed', message: 'Successfully connected to Solana network' },\n          { name: 'Account Validation Test', status: 'passed', message: 'Account validation working correctly' },\n          { name: 'Transaction Signing Test', status: 'passed', message: 'Transaction signing working correctly' },\n          { name: 'Program Interaction Test', status: 'passed', message: 'Program interaction working correctly' },\n          { name: 'Error Handling Test', status: 'warning', message: 'Some error cases not properly handled' }\n        ]\n      });\n      setIsLoading(false);\n    }, 2000);\n  };\n\n  return (\n    <div>\n      <h2>Testing Tools</h2>\n      \n      <div className=\"tabs\">\n        <div \n          className={`tab ${activeTab === 'token' ? 'active' : ''}`}\n          onClick={() => {\n            setActiveTab('token');\n            setTestResults(null);\n          }}\n        >\n          Token Tests\n        </div>\n        <div \n          className={`tab ${activeTab === 'dynamodb' ? 'active' : ''}`}\n          onClick={() => {\n            setActiveTab('dynamodb');\n            setTestResults(null);\n          }}\n        >\n          DynamoDB Tests\n        </div>\n        <div \n          className={`tab ${activeTab === 'rds' ? 'active' : ''}`}\n          onClick={() => {\n            setActiveTab('rds');\n            setTestResults(null);\n          }}\n        >\n          RDS Tests\n        </div>\n        <div \n          className={`tab ${activeTab === 'solana' ? 'active' : ''}`}\n          onClick={() => {\n            setActiveTab('solana');\n            setTestResults(null);\n          }}\n        >\n          Solana Integration Tests\n        </div>\n      </div>\n\n      <div className=\"tab-content\">\n        {activeTab === 'token' && (\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h3 className=\"card-title\">DPNET-10 Token Tests</h3>\n            </div>\n            <div className=\"card-body\">\n              <p>Run comprehensive tests on the DPNET-10 token to verify its functionality on the Solana blockchain.</p>\n              <p>These tests will verify:</p>\n              <ul>\n                <li>Token metadata</li>\n                <li>Token supply</li>\n                <li>Transfer functionality</li>\n                <li>Mint functionality</li>\n                <li>Burn functionality</li>\n              </ul>\n              <button \n                className=\"btn btn-primary\" \n                onClick={runTokenTests}\n                disabled={isLoading}\n              >\n                {isLoading ? 'Running Tests...' : 'Run Token Tests'}\n              </button>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'dynamodb' && (\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h3 className=\"card-title\">DynamoDB Tests</h3>\n            </div>\n            <div className=\"card-body\">\n              <p>Test the DynamoDB integration for storing wallet addresses, transactions, and token metadata.</p>\n              <p>These tests will verify:</p>\n              <ul>\n                <li>DynamoDB connection</li>\n                <li>Wallet table operations</li>\n                <li>Transaction table operations</li>\n                <li>Metadata table operations</li>\n                <li>Query performance</li>\n              </ul>\n              <button \n                className=\"btn btn-primary\" \n                onClick={runDynamoDBTests}\n                disabled={isLoading}\n              >\n                {isLoading ? 'Running Tests...' : 'Run DynamoDB Tests'}\n              </button>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'rds' && (\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h3 className=\"card-title\">RDS Tests</h3>\n            </div>\n            <div className=\"card-body\">\n              <p>Test the RDS integration for storing relational data such as users, presale events, and token information.</p>\n              <p>These tests will verify:</p>\n              <ul>\n                <li>RDS connection</li>\n                <li>User table operations</li>\n                <li>Presale table operations</li>\n                <li>Token info table operations</li>\n                <li>Join queries</li>\n              </ul>\n              <button \n                className=\"btn btn-primary\" \n                onClick={runRDSTests}\n                disabled={isLoading}\n              >\n                {isLoading ? 'Running Tests...' : 'Run RDS Tests'}\n              </button>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'solana' && (\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h3 className=\"card-title\">Solana Integration Tests</h3>\n            </div>\n            <div className=\"card-body\">\n              <p>Test the integration with the Solana blockchain for token operations and smart contract interactions.</p>\n              <p>These tests will verify:</p>\n              <ul>\n                <li>Solana connection</li>\n                <li>Account validation</li>\n                <li>Transaction signing</li>\n                <li>Program interaction</li>\n                <li>Error handling</li>\n              </ul>\n              <button \n                className=\"btn btn-primary\" \n                onClick={runSolanaTests}\n                disabled={isLoading}\n              >\n                {isLoading ? 'Running Tests...' : 'Run Solana Tests'}\n              </button>\n            </div>\n          </div>\n        )}\n\n        {testResults && (\n          <div className={`card ${testResults.success ? 'card-success' : 'card-danger'}`}>\n            <div className=\"card-header\">\n              <h3 className=\"card-title\">Test Results</h3>\n            </div>\n            <div className=\"card-body\">\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th>Test</th>\n                    <th>Status</th>\n                    <th>Message</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {testResults.tests.map((test, index) => (\n                    <tr key={index}>\n                      <td>{test.name}</td>\n                      <td>\n                        <span className={`status-indicator status-${test.status === 'passed' ? 'active' : test.status === 'warning' ? 'paused' : 'stopped'}`}></span>\n                        {test.status}\n                      </td>\n                      <td>{test.message}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TestingTools;\n","import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Typography, Grid, CircularProgress, Box } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport api from '../services/api';\n\nconst StyledCard = styled(Card)(({ theme }) => ({\n  height: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n  borderRadius: '8px',\n  transition: 'transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out',\n  '&:hover': {\n    transform: 'translateY(-5px)',\n    boxShadow: '0 12px 20px rgba(0, 0, 0, 0.1)',\n  },\n}));\n\nconst CardTitle = styled(Typography)(({ theme }) => ({\n  fontSize: '1.1rem',\n  fontWeight: 'bold',\n  marginBottom: '8px',\n  color: '#333',\n}));\n\nconst CardValue = styled(Typography)(({ theme }) => ({\n  fontSize: '1.8rem',\n  fontWeight: 'bold',\n  color: '#1976d2',\n}));\n\nconst RewardsDashboard = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [poolData, setPoolData] = useState({\n    balance: 0,\n    allocation: 0,\n    percentFilled: 0,\n    transactions: 0,\n    lastUpdated: new Date().toISOString()\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await api.get('/api/pools/rewards');\n        if (response && response.data) {\n          setPoolData(response.data);\n          setError(null);\n        } else {\n          // If API returns no data, use token allocation data\n          const tokenAllocations = await api.get('/api/token/allocations');\n          if (tokenAllocations && tokenAllocations.data) {\n            const rewardsPool = tokenAllocations.data.pools.find(pool => \n              pool.name === \"Rewards Pool\"\n            );\n            \n            if (rewardsPool) {\n              setPoolData({\n                balance: 0, // We don't have real balance data\n                allocation: rewardsPool.allocation,\n                percentFilled: 0,\n                transactions: 0,\n                lastUpdated: new Date().toISOString()\n              });\n              setError(null);\n            } else {\n              setError('Failed to find rewards pool data');\n            }\n          } else {\n            setError('Failed to load rewards pool data');\n          }\n        }\n      } catch (err) {\n        console.error('Error fetching rewards pool data:', err);\n        // Try to get token allocation data as fallback\n        try {\n          const tokenAllocations = await api.get('/api/token/allocations');\n          if (tokenAllocations && tokenAllocations.data) {\n            const rewardsPool = tokenAllocations.data.pools.find(pool => \n              pool.name === \"Rewards Pool\"\n            );\n            \n            if (rewardsPool) {\n              setPoolData({\n                balance: 0, // We don't have real balance data\n                allocation: rewardsPool.allocation,\n                percentFilled: 0,\n                transactions: 0,\n                lastUpdated: new Date().toISOString()\n              });\n              setError(null);\n            } else {\n              setError('Failed to find rewards pool data');\n            }\n          } else {\n            setError('Failed to load rewards pool data');\n          }\n        } catch (fallbackErr) {\n          console.error('Error fetching fallback data:', fallbackErr);\n          setError('Failed to load rewards pool data. Please try again later.');\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n\n    const intervalId = setInterval(fetchData, 5 * 60 * 1000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const formatNumber = (num) => {\n    return num ? num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") : 'N/A';\n  };\n\n  const formatDate = (dateString) => {\n    return dateString ? new Date(dateString).toLocaleString() : 'N/A';\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Typography color=\"error\" variant=\"h6\">{error}</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Rewards Pool Dashboard\n      </Typography>\n      <Typography variant=\"subtitle1\" color=\"textSecondary\" gutterBottom>\n        Monitor the rewards pool allocation and usage\n      </Typography>\n\n      <Grid container spacing={3} sx={{ mt: 2 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Current Balance\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(poolData.balance)} DPNET\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Total Allocation\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(poolData.allocation)} DPNET\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Percent Filled\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {poolData.percentFilled?.toFixed(2) || '0.00'}%\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Transactions\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(poolData.transactions)}\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n      </Grid>\n\n      <Box sx={{ mt: 4 }}>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          Last updated: {formatDate(poolData.lastUpdated)}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          Wallet Address: FdYsNj3jhGLcCzoMLA2KZdzUnM3UiwCYUNhMmmFaUDie\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default RewardsDashboard;\n","import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Typography, Grid, CircularProgress, Box } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport api from '../services/api';\n\nconst StyledCard = styled(Card)(({ theme }) => ({\n  height: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n  borderRadius: '8px',\n  transition: 'transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out',\n  '&:hover': {\n    transform: 'translateY(-5px)',\n    boxShadow: '0 12px 20px rgba(0, 0, 0, 0.1)',\n  },\n}));\n\nconst CardTitle = styled(Typography)(({ theme }) => ({\n  fontSize: '1.1rem',\n  fontWeight: 'bold',\n  marginBottom: '8px',\n  color: '#333',\n}));\n\nconst CardValue = styled(Typography)(({ theme }) => ({\n  fontSize: '1.8rem',\n  fontWeight: 'bold',\n  color: '#1976d2',\n}));\n\nconst LiquidityDashboard = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [poolData, setPoolData] = useState({\n    balance: 0,\n    allocation: 0,\n    percentFilled: 0,\n    transactions: 0,\n    lastUpdated: new Date().toISOString()\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await api.get('/api/pools/liquidity');\n        if (response && response.data) {\n          setPoolData(response.data);\n          setError(null);\n        } else {\n          // If API returns no data, use token allocation data\n          const tokenAllocations = await api.get('/api/token/allocations');\n          if (tokenAllocations && tokenAllocations.data) {\n            const liquidityPool = tokenAllocations.data.pools.find(pool => \n              pool.name === \"Liquidity Pools\"\n            );\n            \n            if (liquidityPool) {\n              setPoolData({\n                balance: 0, // We don't have real balance data\n                allocation: liquidityPool.allocation,\n                percentFilled: 0,\n                transactions: 0,\n                lastUpdated: new Date().toISOString()\n              });\n              setError(null);\n            } else {\n              setError('Failed to find liquidity pool data');\n            }\n          } else {\n            setError('Failed to load liquidity pool data');\n          }\n        }\n      } catch (err) {\n        console.error('Error fetching liquidity pool data:', err);\n        // Try to get token allocation data as fallback\n        try {\n          const tokenAllocations = await api.get('/api/token/allocations');\n          if (tokenAllocations && tokenAllocations.data) {\n            const liquidityPool = tokenAllocations.data.pools.find(pool => \n              pool.name === \"Liquidity Pools\"\n            );\n            \n            if (liquidityPool) {\n              setPoolData({\n                balance: 0, // We don't have real balance data\n                allocation: liquidityPool.allocation,\n                percentFilled: 0,\n                transactions: 0,\n                lastUpdated: new Date().toISOString()\n              });\n              setError(null);\n            } else {\n              setError('Failed to find liquidity pool data');\n            }\n          } else {\n            setError('Failed to load liquidity pool data');\n          }\n        } catch (fallbackErr) {\n          console.error('Error fetching fallback data:', fallbackErr);\n          setError('Failed to load liquidity pool data. Please try again later.');\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n\n    const intervalId = setInterval(fetchData, 5 * 60 * 1000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const formatNumber = (num) => {\n    return num ? num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") : 'N/A';\n  };\n\n  const formatDate = (dateString) => {\n    return dateString ? new Date(dateString).toLocaleString() : 'N/A';\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Typography color=\"error\" variant=\"h6\">{error}</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Liquidity Pools Dashboard\n      </Typography>\n      <Typography variant=\"subtitle1\" color=\"textSecondary\" gutterBottom>\n        Monitor the liquidity pools allocation and usage\n      </Typography>\n\n      <Grid container spacing={3} sx={{ mt: 2 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Current Balance\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(poolData.balance)} DPNET\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Total Allocation\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(poolData.allocation)} DPNET\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Percent Filled\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {poolData.percentFilled?.toFixed(2) || '0.00'}%\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Transactions\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(poolData.transactions)}\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n      </Grid>\n\n      <Box sx={{ mt: 4 }}>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          Last updated: {formatDate(poolData.lastUpdated)}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          Wallet Address: 3HUwa6YYKNdDgsU6nkkMWyBgT2BRtzmD1JpWSg77sa55\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default LiquidityDashboard;\n","import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Typography, Grid, CircularProgress, Box } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport api from '../services/api';\n\nconst StyledCard = styled(Card)(({ theme }) => ({\n  height: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n  borderRadius: '8px',\n  transition: 'transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out',\n  '&:hover': {\n    transform: 'translateY(-5px)',\n    boxShadow: '0 12px 20px rgba(0, 0, 0, 0.1)',\n  },\n}));\n\nconst CardTitle = styled(Typography)(({ theme }) => ({\n  fontSize: '1.1rem',\n  fontWeight: 'bold',\n  marginBottom: '8px',\n  color: '#333',\n}));\n\nconst CardValue = styled(Typography)(({ theme }) => ({\n  fontSize: '1.8rem',\n  fontWeight: 'bold',\n  color: '#1976d2',\n}));\n\nconst MarketingDashboard = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [poolData, setPoolData] = useState({\n    balance: 0,\n    allocation: 0,\n    percentFilled: 0,\n    transactions: 0,\n    lastUpdated: new Date().toISOString()\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await api.get('/api/pools/marketing');\n        if (response && response.data) {\n          setPoolData(response.data);\n          setError(null);\n        } else {\n          // If API returns no data, use token allocation data\n          const tokenAllocations = await api.get('/api/token/allocations');\n          if (tokenAllocations && tokenAllocations.data) {\n            const marketingPool = tokenAllocations.data.pools.find(pool => \n              pool.name === \"Marketing, Airdrops, and Community Building\"\n            );\n            \n            if (marketingPool) {\n              setPoolData({\n                balance: 0, // We don't have real balance data\n                allocation: marketingPool.allocation,\n                percentFilled: 0,\n                transactions: 0,\n                lastUpdated: new Date().toISOString()\n              });\n              setError(null);\n            } else {\n              setError('Failed to find marketing pool data');\n            }\n          } else {\n            setError('Failed to load marketing pool data');\n          }\n        }\n      } catch (err) {\n        console.error('Error fetching marketing pool data:', err);\n        // Try to get token allocation data as fallback\n        try {\n          const tokenAllocations = await api.get('/api/token/allocations');\n          if (tokenAllocations && tokenAllocations.data) {\n            const marketingPool = tokenAllocations.data.pools.find(pool => \n              pool.name === \"Marketing, Airdrops, and Community Building\"\n            );\n            \n            if (marketingPool) {\n              setPoolData({\n                balance: 0, // We don't have real balance data\n                allocation: marketingPool.allocation,\n                percentFilled: 0,\n                transactions: 0,\n                lastUpdated: new Date().toISOString()\n              });\n              setError(null);\n            } else {\n              setError('Failed to find marketing pool data');\n            }\n          } else {\n            setError('Failed to load marketing pool data');\n          }\n        } catch (fallbackErr) {\n          console.error('Error fetching fallback data:', fallbackErr);\n          setError('Failed to load marketing pool data. Please try again later.');\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n\n    const intervalId = setInterval(fetchData, 5 * 60 * 1000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const formatNumber = (num) => {\n    return num ? num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") : 'N/A';\n  };\n\n  const formatDate = (dateString) => {\n    return dateString ? new Date(dateString).toLocaleString() : 'N/A';\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Typography color=\"error\" variant=\"h6\">{error}</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Marketing & Community Dashboard\n      </Typography>\n      <Typography variant=\"subtitle1\" color=\"textSecondary\" gutterBottom>\n        Monitor the marketing, airdrops, and community building allocation and usage\n      </Typography>\n\n      <Grid container spacing={3} sx={{ mt: 2 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Current Balance\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(poolData.balance)} DPNET\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Total Allocation\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(poolData.allocation)} DPNET\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Percent Filled\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {poolData.percentFilled?.toFixed(2) || '0.00'}%\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Transactions\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(poolData.transactions)}\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n      </Grid>\n\n      <Box sx={{ mt: 4 }}>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          Last updated: {formatDate(poolData.lastUpdated)}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          Wallet Address: 99AufghSAA7Xj1grrhLgiZMvGXk6XAGLESf1PRJBpoko\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default MarketingDashboard;\n","import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Typography, Grid, CircularProgress, Box } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport api from '../services/api';\n\nconst StyledCard = styled(Card)(({ theme }) => ({\n  height: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n  borderRadius: '8px',\n  transition: 'transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out',\n  '&:hover': {\n    transform: 'translateY(-5px)',\n    boxShadow: '0 12px 20px rgba(0, 0, 0, 0.1)',\n  },\n}));\n\nconst CardTitle = styled(Typography)(({ theme }) => ({\n  fontSize: '1.1rem',\n  fontWeight: 'bold',\n  marginBottom: '8px',\n  color: '#333',\n}));\n\nconst CardValue = styled(Typography)(({ theme }) => ({\n  fontSize: '1.8rem',\n  fontWeight: 'bold',\n  color: '#1976d2',\n}));\n\nconst TeamDashboard = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [poolData, setPoolData] = useState({\n    balance: 0,\n    allocation: 0,\n    percentFilled: 0,\n    transactions: 0,\n    lastUpdated: new Date().toISOString()\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await api.get('/api/pools/team');\n        if (response && response.data) {\n          setPoolData(response.data);\n          setError(null);\n        } else {\n          // If API returns no data, use token allocation data\n          const tokenAllocations = await api.get('/api/token/allocations');\n          if (tokenAllocations && tokenAllocations.data) {\n            const teamPool = tokenAllocations.data.pools.find(pool => \n              pool.name === \"Team Allocation\"\n            );\n            \n            if (teamPool) {\n              setPoolData({\n                balance: 0, // We don't have real balance data\n                allocation: teamPool.allocation,\n                percentFilled: 0,\n                transactions: 0,\n                lastUpdated: new Date().toISOString()\n              });\n              setError(null);\n            } else {\n              setError('Failed to find team pool data');\n            }\n          } else {\n            setError('Failed to load team pool data');\n          }\n        }\n      } catch (err) {\n        console.error('Error fetching team pool data:', err);\n        // Try to get token allocation data as fallback\n        try {\n          const tokenAllocations = await api.get('/api/token/allocations');\n          if (tokenAllocations && tokenAllocations.data) {\n            const teamPool = tokenAllocations.data.pools.find(pool => \n              pool.name === \"Team Allocation\"\n            );\n            \n            if (teamPool) {\n              setPoolData({\n                balance: 0, // We don't have real balance data\n                allocation: teamPool.allocation,\n                percentFilled: 0,\n                transactions: 0,\n                lastUpdated: new Date().toISOString()\n              });\n              setError(null);\n            } else {\n              setError('Failed to find team pool data');\n            }\n          } else {\n            setError('Failed to load team pool data');\n          }\n        } catch (fallbackErr) {\n          console.error('Error fetching fallback data:', fallbackErr);\n          setError('Failed to load team pool data. Please try again later.');\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n\n    const intervalId = setInterval(fetchData, 5 * 60 * 1000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const formatNumber = (num) => {\n    return num ? num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") : 'N/A';\n  };\n\n  const formatDate = (dateString) => {\n    return dateString ? new Date(dateString).toLocaleString() : 'N/A';\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Typography color=\"error\" variant=\"h6\">{error}</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Team Allocation Dashboard\n      </Typography>\n      <Typography variant=\"subtitle1\" color=\"textSecondary\" gutterBottom>\n        Monitor the team allocation and vesting schedule\n      </Typography>\n\n      <Grid container spacing={3} sx={{ mt: 2 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Current Balance\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(poolData.balance)} DPNET\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Total Allocation\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(poolData.allocation)} DPNET\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Percent Filled\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {poolData.percentFilled?.toFixed(2) || '0.00'}%\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Transactions\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(poolData.transactions)}\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n      </Grid>\n\n      <Box sx={{ mt: 4 }}>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          Last updated: {formatDate(poolData.lastUpdated)}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          Wallet Address: 2MAP3pASkcvdeKnsRS5JGFebYvvAG14ikShtPLbwg4sw\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default TeamDashboard;\n","import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Typography, Grid, CircularProgress, Box } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport api from '../services/api';\n\nconst StyledCard = styled(Card)(({ theme }) => ({\n  height: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n  borderRadius: '8px',\n  transition: 'transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out',\n  '&:hover': {\n    transform: 'translateY(-5px)',\n    boxShadow: '0 12px 20px rgba(0, 0, 0, 0.1)',\n  },\n}));\n\nconst CardTitle = styled(Typography)(({ theme }) => ({\n  fontSize: '1.1rem',\n  fontWeight: 'bold',\n  marginBottom: '8px',\n  color: '#333',\n}));\n\nconst CardValue = styled(Typography)(({ theme }) => ({\n  fontSize: '1.8rem',\n  fontWeight: 'bold',\n  color: '#1976d2',\n}));\n\nconst TreasuryDashboard = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [poolData, setPoolData] = useState({\n    balance: 0,\n    allocation: 0,\n    percentFilled: 0,\n    transactions: 0,\n    lastUpdated: new Date().toISOString()\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await api.get('/api/pools/treasury');\n        if (response && response.data) {\n          setPoolData(response.data);\n          setError(null);\n        } else {\n          // If API returns no data, use token allocation data\n          const tokenAllocations = await api.get('/api/token/allocations');\n          if (tokenAllocations && tokenAllocations.data) {\n            const treasuryPool = tokenAllocations.data.pools.find(pool => \n              pool.name === \"Treasury Reserves\"\n            );\n            \n            if (treasuryPool) {\n              setPoolData({\n                balance: 0, // We don't have real balance data\n                allocation: treasuryPool.allocation,\n                percentFilled: 0,\n                transactions: 0,\n                lastUpdated: new Date().toISOString()\n              });\n              setError(null);\n            } else {\n              setError('Failed to find treasury pool data');\n            }\n          } else {\n            setError('Failed to load treasury pool data');\n          }\n        }\n      } catch (err) {\n        console.error('Error fetching treasury pool data:', err);\n        // Try to get token allocation data as fallback\n        try {\n          const tokenAllocations = await api.get('/api/token/allocations');\n          if (tokenAllocations && tokenAllocations.data) {\n            const treasuryPool = tokenAllocations.data.pools.find(pool => \n              pool.name === \"Treasury Reserves\"\n            );\n            \n            if (treasuryPool) {\n              setPoolData({\n                balance: 0, // We don't have real balance data\n                allocation: treasuryPool.allocation,\n                percentFilled: 0,\n                transactions: 0,\n                lastUpdated: new Date().toISOString()\n              });\n              setError(null);\n            } else {\n              setError('Failed to find treasury pool data');\n            }\n          } else {\n            setError('Failed to load treasury pool data');\n          }\n        } catch (fallbackErr) {\n          console.error('Error fetching fallback data:', fallbackErr);\n          setError('Failed to load treasury pool data. Please try again later.');\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n\n    const intervalId = setInterval(fetchData, 5 * 60 * 1000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const formatNumber = (num) => {\n    return num ? num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") : 'N/A';\n  };\n\n  const formatDate = (dateString) => {\n    return dateString ? new Date(dateString).toLocaleString() : 'N/A';\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Typography color=\"error\" variant=\"h6\">{error}</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Treasury Reserves Dashboard\n      </Typography>\n      <Typography variant=\"subtitle1\" color=\"textSecondary\" gutterBottom>\n        Monitor the treasury reserves allocation and usage\n      </Typography>\n\n      <Grid container spacing={3} sx={{ mt: 2 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Current Balance\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(poolData.balance)} DPNET\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Total Allocation\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(poolData.allocation)} DPNET\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Percent Filled\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {poolData.percentFilled?.toFixed(2) || '0.00'}%\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <StyledCard>\n            <CardContent>\n              <CardTitle color=\"textSecondary\" gutterBottom>\n                Transactions\n              </CardTitle>\n              <CardValue variant=\"h5\">\n                {formatNumber(poolData.transactions)}\n              </CardValue>\n            </CardContent>\n          </StyledCard>\n        </Grid>\n      </Grid>\n\n      <Box sx={{ mt: 4 }}>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          Last updated: {formatDate(poolData.lastUpdated)}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          Wallet Address: 2BLLHiCHtrYDRUuh4VndsnNPpyJ3AHFp3oMAcxNX1kJj\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default TreasuryDashboard;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Box from '@mui/material/Box';\n\n// Components\nimport Navbar from './components/Navbar';\nimport Sidebar from './components/Sidebar';\n\n// Pages\nimport Dashboard from './pages/Dashboard';\nimport PresaleOverview from './pages/PresaleOverview';\nimport PresaleManagement from './pages/PresaleManagement';\nimport WhitelistManagement from './pages/WhitelistManagement';\nimport TestingTools from './pages/TestingTools';\nimport RewardsDashboard from './pages/RewardsDashboard';\nimport LiquidityDashboard from './pages/LiquidityDashboard';\nimport MarketingDashboard from './pages/MarketingDashboard';\nimport TeamDashboard from './pages/TeamDashboard';\nimport TreasuryDashboard from './pages/TreasuryDashboard';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#1976d2',\n    },\n    secondary: {\n      main: '#dc004e',\n    },\n    background: {\n      default: '#f5f5f5',\n    },\n  },\n  typography: {\n    fontFamily: [\n      'Roboto',\n      'Arial',\n      'sans-serif',\n    ].join(','),\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Router>\n        <Box sx={{ display: 'flex', flexDirection: 'column' }}>\n          <Navbar />\n          <Box sx={{ display: 'flex', mt: '60px' }}>\n            <Sidebar />\n            <Box component=\"main\" sx={{ flexGrow: 1, p: 3, ml: '250px' }}>\n              <Routes>\n                {/* Presale Pool Routes */}\n                <Route path=\"/\" element={<Dashboard />} />\n                <Route path=\"/presale-overview\" element={<PresaleOverview />} />\n                <Route path=\"/presale-management\" element={<PresaleManagement />} />\n                <Route path=\"/whitelist-management\" element={<WhitelistManagement />} />\n                <Route path=\"/testing-tools\" element={<TestingTools />} />\n                \n                {/* Other Pool Dashboard Routes */}\n                <Route path=\"/rewards-dashboard\" element={<RewardsDashboard />} />\n                <Route path=\"/liquidity-dashboard\" element={<LiquidityDashboard />} />\n                <Route path=\"/marketing-dashboard\" element={<MarketingDashboard />} />\n                <Route path=\"/team-dashboard\" element={<TeamDashboard />} />\n                <Route path=\"/treasury-dashboard\" element={<TreasuryDashboard />} />\n              </Routes>\n            </Box>\n          </Box>\n        </Box>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}